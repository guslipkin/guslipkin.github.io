{
  "hash": "be700d4442612cbbc7eec3aeee981c7a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Building a Computer in R\"\nauthor: \"Gus Lipkin\"\nformat: \n  revealjs:\n    controls: true\n    self-contained: true\n    incremental: true\nexecute: \n  echo: true\ndraft: true\n---\n\n\n## About Me\n\n- At work:\n  - I love R\n  - Data scientist at Lander Analytics\n  - BS in Business Analytics\n  \n## About Me\n\n- Not at work:\n  - Mentor in the Data Science Learning Community\n    - Talk to Jon Harmon to learn more!\n  - Hiking, biking, rock climbing\n    - Volunteer at USA Climbing events\n  - Work on random projects\n\n## What are we doing?\n\n- \"R is a language and environment for statistical computing and graphics\" The R Project\n- What if we ignored that and made a computer?\n\n## What is a computer?\n\n- A computer can:\n  - Store data\n  - Retrieve data\n  - \"Carry out sequences of arithmetic or logical operations\" Wikipedia (It's a great source!)\n\n## Why?\n\n- Advent of Code!\n  - 25 programming puzzles to save Christmas\n\n## What is our puzzle?\n\n- Follow these instructions to get a secret phrase that is the solution to this year's puzzle to help save NYR 10. \n- You have five registers that start with a value of `\"0\"`. \n- Because the computer can only process integers, the characters are stored in `UTF8` as integers. \n- Each character is stored in a register `a` through `e`. \n- The instructions are `add` and `sub`, which `add` to a register and assign it back to that register and or `sub`tract a value from that register's value and assign it back to that register.\n\n## What are our instructions? {auto-animate=true}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadLines(ins_txt) |>\n  paste0(collapse = '\\n') |>\n  cat()\n```\n:::\n\n\n## What are our instructions?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadLines(ins_txt) |>\n  paste0(collapse = '\\n') |>\n  cat()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nadd b 8\nsub e 29\nadd d 1\nsub d 16\nsub a 21\nadd b 28\nadd b 5\nadd d 16\nadd a 10\nadd c 61\nadd e 14\nsub c 15\nadd a 41\nadd e 15\nsub c 12\n```\n\n\n:::\n:::\n\n\n## Making a plan\n\n- Parse the instructions from a text file\n- An R object that is self-referenceable\n  - A list of registers\n  - A list of instructions\n  - A way to step through the instructions in order\n\n## Processing Our Instructions {auto-animate=true}\n\n:::{.nonincremental}\n- Read in the file\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadLines(ins_txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"add b 8\"  \"sub e 29\" \"add d 1\"  \"sub d 16\" \"sub a 21\" \"add b 28\"\n [7] \"add b 5\"  \"add d 16\" \"add a 10\" \"add c 61\" \"add e 14\" \"sub c 15\"\n[13] \"add a 41\" \"add e 15\" \"sub c 12\"\n```\n\n\n:::\n:::\n\n\n## Processing Our Instructions {auto-animate=true}\n\n:::{.nonincremental}\n- Split each line into words\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadLines(ins_txt) |>\n  stringr::str_split(' ')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"add\" \"b\"   \"8\"  \n\n[[2]]\n[1] \"sub\" \"e\"   \"29\" \n\n[[3]]\n[1] \"add\" \"d\"   \"1\"  \n\n[[4]]\n[1] \"sub\" \"d\"   \"16\" \n\n[[5]]\n[1] \"sub\" \"a\"   \"21\" \n\n[[6]]\n[1] \"add\" \"b\"   \"28\" \n\n[[7]]\n[1] \"add\" \"b\"   \"5\"  \n\n[[8]]\n[1] \"add\" \"d\"   \"16\" \n\n[[9]]\n[1] \"add\" \"a\"   \"10\" \n\n[[10]]\n[1] \"add\" \"c\"   \"61\" \n\n[[11]]\n[1] \"add\" \"e\"   \"14\" \n\n[[12]]\n[1] \"sub\" \"c\"   \"15\" \n\n[[13]]\n[1] \"add\" \"a\"   \"41\" \n\n[[14]]\n[1] \"add\" \"e\"   \"15\" \n\n[[15]]\n[1] \"sub\" \"c\"   \"12\" \n```\n\n\n:::\n:::\n\n\n## Processing Our Instructions {auto-animate=true}\n\n:::{.nonincremental}\n- Name the `f`unction, `r`egister, and `y`alues\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstructions <-\n  readLines(ins_txt) |>\n  stringr::str_split(' ') |>\n  purrr::map(\\(x) { names(x) <- c('f', 'r', 'y'); return(x); }) |>\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n    f     r     y \n\"add\"   \"b\"   \"8\" \n\n[[2]]\n    f     r     y \n\"sub\"   \"e\"  \"29\" \n\n[[3]]\n    f     r     y \n\"add\"   \"d\"   \"1\" \n\n[[4]]\n    f     r     y \n\"sub\"   \"d\"  \"16\" \n\n[[5]]\n    f     r     y \n\"sub\"   \"a\"  \"21\" \n\n[[6]]\n    f     r     y \n\"add\"   \"b\"  \"28\" \n\n[[7]]\n    f     r     y \n\"add\"   \"b\"   \"5\" \n\n[[8]]\n    f     r     y \n\"add\"   \"d\"  \"16\" \n\n[[9]]\n    f     r     y \n\"add\"   \"a\"  \"10\" \n\n[[10]]\n    f     r     y \n\"add\"   \"c\"  \"61\" \n\n[[11]]\n    f     r     y \n\"add\"   \"e\"  \"14\" \n\n[[12]]\n    f     r     y \n\"sub\"   \"c\"  \"15\" \n\n[[13]]\n    f     r     y \n\"add\"   \"a\"  \"41\" \n\n[[14]]\n    f     r     y \n\"add\"   \"e\"  \"15\" \n\n[[15]]\n    f     r     y \n\"sub\"   \"c\"  \"12\" \n```\n\n\n:::\n:::\n\n  \n## Choosing an OOP System\n\n\n\n## Starting with an `R6` object {auto-animate=true}\n\n- Can modify itself using the `self` object\n- Provides `public` and `private` methods (functions)\n\n## Starting with an `R6` object {auto-animate=true}\n\n:::{.nonincremental}\n- Can modify itself using the `self` object\n- Provides `public` and `private` methods (functions)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1,5|2|3|4|\"}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(),\n  'private' = list()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<nyr10> object generator\n  Public:\n    clone: function (deep = FALSE) \n  Parent env: <environment: R_GlobalEnv>\n  Locked objects: TRUE\n  Locked class: FALSE\n  Portable: TRUE\n```\n\n\n:::\n:::\n\n\n## Creating Registers\n\n- You have five registers that start with a value of `\"0\"`. \n- Because the computer can only process integers, the characters are stored in `UTF8` as integers. \n- Each character is stored in a register `a` through `e`. \n\n## Creating Registers {auto-animate=true}\n\n:::{.nonincremental}\n- You have five registers that start with a value of `\"0\"`. \n- Because the computer can only process integers, the characters are stored in `UTF8` as integers. \n- Each character is stored in a register `a` through `e`. \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(zeroAsUTF8 <- utf8ToInt('0'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n:::\n\n\n## Creating Registers {auto-animate=true}\n\n:::{.nonincremental}\n- You have five registers that start with a value of `\"0\"`. \n- Because the computer can only process integers, the characters are stored in `UTF8` as integers. \n- Each character is stored in a register `a` through `e`. \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2-9|3-8|\"}\nzeroAsUTF8 <- utf8ToInt('0')\nregisters <- \n  list(\n    'a' = zeroAsUTF8,\n    'b' = zeroAsUTF8,\n    'c' = zeroAsUTF8,\n    'd' = zeroAsUTF8,\n    'e' = zeroAsUTF8\n  )\n```\n:::\n\n\n## Creating Functions\n\n- The instructions are `add` and `sub`, which `add` to a register and assign it back to that register and or `sub`tract a value from that register's value and assign it back to that register.\n\n## Creating Functions {auto-animate=true}\n\n:::{.nonincremental}\n- The instructions are `add` and `sub`, which `add` to a register and assign it back to that register and or `sub`tract a value from that register's value and assign it back to that register.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-2,6|3|4|5|\"}\nfunctions <-\n  list(\n    'add' = \\(r, y) { self[[r]] <- self[[r]] + y },\n    'sub' = \\(r, y) { self[[r]] <- self[[r]] - y }\n  )\n```\n:::\n\n\n## Creating an Empty Computer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(),\n  'private' = list()\n)\n```\n:::\n\n\n## Adding a System Clock {auto-animate=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(),\n  'private' = list()\n)\n```\n:::\n\n\n- We need an index for the clock\n- It needs to increment\n\n## Adding a System Clock {auto-animate=true}\n\n:::{.nonincremental}\n- We need an index for the clock\n- It needs to increment\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4,7|4|7|\"}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(\n    'index' = 1\n  ),\n  'private' = list(\n    '.inc' = \\() { self$index <- self$index + 1; return(self); }\n  )\n)\n```\n:::\n\n\n## Calling Our Functions {auto-animate=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(\n    'index' = 1\n  ),\n  'private' = list(\n    '.inc' = \\() { self$index <- self$index + 1; return(self); }\n  )\n)\n```\n:::\n\n\n- We need a way to call our functions\n- We'll increment our clock after each function\n\n## Calling Our Functions {auto-animate=true}\n\n:::{.nonincremental}\n- We need a way to call our functions\n- We'll increment our clock after each function\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5-8|5,8|6|7|5-8|\"}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(\n    ...,\n    'call' = \\(fun, reg, y) {\n      self[[fun]](reg, y)\n      private$.inc()\n    }\n  ),\n  'private' = list(\n    ...\n  )\n)\n```\n:::\n\n\n## Running Through the Instructions  {auto-animate=true .smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(\n    'index' = 1,\n    'call' = \\(fun, reg, y) {\n      self[[fun]](reg, y)\n      private$.inc()\n    }\n  ),\n  'private' = list(\n    '.inc' = \\() { self$index <- self$index + 1; return(self); }\n  )\n)\n```\n:::\n\n\n- We need to step through our instructions\n- Return the computer's state when we reach the end of the list\n\n## Running Through the Instructions  {auto-animate=true .smaller}\n\n:::{.nonincremental}\n- We need to step through our instructions\n- Return the computer's state when we reach the end of the list\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5-11|5,10-11|6,9|7|8|5-11|\"}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(\n    ...,\n    'run' = \\(insructions) {\n      while(self$index <= length(insructions)) { \n        ins <- instructions[[self$index]]\n        self$call(ins['f'], ins['r'], as.integer(ins['y']))\n      }\n      return(self)\n    }\n  ),\n  'private' = list(\n    ...\n  )\n)\n```\n:::\n\n\n## Adding in Our Registers and Functions {auto-animate=true .smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR6::R6Class(\n  'classname' = 'nyr10',\n  'public' = list(\n    'index' = 1,\n    'call' = \\(fun, reg, y) {\n      self[[fun]](reg, y)\n      private$.inc()\n    },\n    'run' = \\(insructions) {\n      while(self$index <= length(insructions)) { \n        ins <- instructions[[self$index]]\n        self$call(ins['f'], ins['r'], as.integer(ins['y']))\n      }\n      return(self)\n    }\n  ),\n  'private' = list(\n    '.inc' = \\() { self$index <- self$index + 1; return(self); }\n  )\n)\n```\n:::\n\n\n- We need to add our registers and functions\n\n## Adding in Our Registers and Functions {auto-animate=true .smaller}\n\n:::{.nonincremental}\n- We need to add our registers and functions\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3-4,6|\"}\nR6::R6Class(\n  'nyr10',\n  'public' = unlist(list(\n    as.list(c(registers, functions)),\n    ...\n  )),\n  'private' = list(\n    ...\n  )\n)\n```\n:::\n\n\n## Building the Computer Class {auto-animate=true .smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1,21|\"}\ncomputer <- R6::R6Class(\n  'nyr10',\n  'public' = unlist(list(\n    as.list(c(registers, functions)),\n    'index' = 1,\n    'call' = \\(fun, reg, y) {\n      self[[fun]](reg, y)\n      private$.inc()\n    },\n    'run' = \\(insructions) {\n      while(self$index <= length(insructions)) { \n        ins <- instructions[[self$index]]\n        self$call(ins['f'], ins['r'], as.integer(ins['y']))\n      }\n      return(self)\n    }\n  )),\n  'private' = list(\n    '.inc' = \\() { self$index <- self$index + 1; return(self); }\n  )\n)\n```\n:::\n\n\n## Creating a Computer {auto-animate=true}\n\n## Creating a Computer {auto-animate=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp <- computer$new()\n```\n:::\n\n\n## Creating a Computer {auto-animate=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp <- computer$new()\nprint(comp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<nyr10>\n  Public:\n    a: 48\n    add: function (r, y) \n    b: 48\n    c: 48\n    call: function (fun, reg, y) \n    clone: function (deep = FALSE) \n    d: 48\n    e: 48\n    index: 1\n    run: function (insructions) \n    sub: function (r, y) \n  Private:\n    .inc: function () \n```\n\n\n:::\n:::\n\n\n## Running the Instructions {auto-animate=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nend <- comp$run(instructions)\n```\n:::\n\n\n## Running the Instructions {auto-animate=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nend <- comp$run(instructions)\nprint(end)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<nyr10>\n  Public:\n    a: 78\n    add: function (r, y) \n    b: 89\n    c: 82\n    call: function (fun, reg, y) \n    clone: function (deep = FALSE) \n    d: 49\n    e: 48\n    index: 16\n    run: function (insructions) \n    sub: function (r, y) \n  Private:\n    .inc: function () \n```\n\n\n:::\n:::\n\n\n## Translating the Secret Message {auto-animate=true}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|1-2|\"}\nletters[1:5] |>\n  purrr::map_chr(\\(l) intToUtf8(end[[l]])) |>\n  paste0(collapse = '') |>\n  cat()\n```\n:::\n\n\n## Translating the Secret Message {auto-animate=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nletters[1:5] |>\n  purrr::map_chr(\\(l) intToUtf8(end[[l]])) |>\n  paste0(collapse = '') |>\n  cat()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNYR10\n```\n\n\n:::\n:::\n\n\n## Where to Find Me\n\n- Upstairs!\n- Online at [guslipkin.me](https://guslipkin.me/)\n  - Links to everywhere else from there\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}