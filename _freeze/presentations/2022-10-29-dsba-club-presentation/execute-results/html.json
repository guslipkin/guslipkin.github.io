{
  "hash": "6fb63d617778cb9e80a698671f83309e",
  "result": {
    "markdown": "---\ntitle: \"DSBA Club\"\nsubtitle: \"Gus Lipkin\"\nAuthor: \"Gus Lipkin\"\ndate: \"2022-10-29\"\nformat: \n  revealjs:\n    theme: default\n    controls: true\n    self-contained: true\n---\n\n\n## Topics may include...\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n![](../assets/gus_headshot_new.jpg)\n\n:::\n\n::: {.column width=\"60%\"}\n\n- A bit about me\n  - Me\n  - My time at Poly\n  - My current role\n- **The main event**\n- Some other stuff\n\n:::\n\n::::\n\n# A bit about me\n\n## Me\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n- I like asking questions\n- I have a cute cat\n- I'm from Massachusetts\n- I self-host my own server for data storage and running a pi-hole\n- I have three bikes, a tandem, and three unicycles\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](../assets/mabel-collage.jpg)\n\n:::\n\n::::\n\n## My time at Poly {.smaller}\n\n- Data Science -> Business Analytics for business/management classes\n- Concentrations in...\n  - Quantitative Economics & Econometrics\n  - Intelligent Mobility\n- Capstone project with Tallahassee Memorial Healthcare\n\n![](../assets/capstone.jpg){.absolute bottom=0 width=\"50%\" height=\"50%\"}\n\n## My current role\n\nData Analyst at Publix Supermarkets\n\n- Since just after graduation in May\n- Working on... \n  - Shrink Reports (what goods couldn't be sold and why)\n  - Contribution Margin (ðŸ’²profitðŸ’²)\n  \n# **The Main Event**\n\n**A real-world problem**\n\n## Overview\n\nWe want to know the cost to ship items to stores at the weekly store item level. That is, how much does it cost to ship the same item to different stores, or different items to the same store, with each scenario covering a week's worth of costs? ($/store/item)\n\nWe have two tables that describe warehouse to store distribution. One contains information on trips a truck takes to deliver to stores on its planned route. The second contains information on items shipped to each store.\n\nFor each trip, there may be many stores. For each store, there may be many items.\n\n## Tables {.smaller auto-animate=true}\n\nHow would you connect these two tables so that each item is assigned a cost from the correct trip?\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n::: {data-id=\"trips\"}\n**`TRIPS`**\n:::\n::: {data-id=\"trip_code\"}\n- `TRIP_CODE` (chr)\n:::\n::: {data-id=\"date1\"}\n- `DATE` (date)\n:::\n::: {data-id=\"origin_whse\"}\n- `ORIGIN_WHSE` (int) \n:::\n::: {data-id=\"stop1\"}\n- `STOP` (int)\n:::\n::: {data-id=\"order_number\"}\n- `ORDER_NUMBER` (chr)\n:::\n::: {data-id=\"ship_cost\"}\n- `SHIP_COST` (dbl)\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {data-id=\"whse\"}\n**`WHSE`**\n:::\n::: {data-id=\"fill_code\"}\n- `FILL_CODE` (chr)\n:::\n::: {data-id=\"date2\"}\n- `DATE` (date)\n:::\n::: {data-id=\"ship_whse\"}\n- `SHIP_WHSE` (int)\n:::\n::: {data-id=\"stop2\"}\n- `STOP` (int)\n:::\n::: {data-id=\"invoice_number\"}\n- `INVOICE_NUMBER` (chr)\n:::\n::: {data-id=\"item_id\"}\n- `ITEM_ID` (int)\n:::\n::: {data-id=\"item_cube\"}\n- `ITEM_CUBE` (dbl)\n:::\n:::\n::::\n\n## Exact Matching {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {data-id=\"trips\"}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n::: {data-id=\"date1\"}\n<p align=\"right\">`DATE`</p>\n:::\n::: {data-id=\"origin_whse\" text-align=\"right\"}\n<p align=\"right\">`ORIGIN_WHSE`</p>\n:::\n::: {data-id=\"stop1\" text-align=\"right\"}\n<p align=\"right\">`STOP`</p>\n:::\n:::\n\n::: {.column width=\"10%\"}\n<p><br></p>\n<p align=\"center\">==</p>\n<p align=\"center\">==</p>\n<p align=\"center\">==</p>\n:::\n\n::: {.column width=\"45%\"}\n::: {data-id=\"whse\"}\n<p align=\"left\">**`WHSE`**</p>\n:::\n::: {data-id=\"date2\"}\n<p align=\"left\">`DATE`</p>\n:::\n::: {data-id=\"ship_whse\"}\n<p align=\"left\">`SHIP_WHSE`</p>\n:::\n::: {data-id=\"stop2\"}\n<p align=\"left\">`STOP`</p>\n:::\n:::\n::::\n\n## A needed explanation {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p><br></p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">**`WHSE`**</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`DATE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`DATE`</p>\n:::\n:::\n::::\n\n::: {data-id=\"explanation\" .fragment .fade-in-then-out}\nBecause we're aggregating at a weekly level, matching by the smallest interval possible is okay so long as it's shorter than a week.\n:::\n\n## A needed explanation {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p><br></p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">**`WHSE`**</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`DATE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`DATE`</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {data-id=\"origin_whse\"}\n<p align=\"right\">`ORIGIN_WHSE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {data-id=\"ship_whse\"}\n<p align=\"left\">`SHIP_WHSE`</p>\n:::\n:::\n::::\n\n::: {data-id=\"explanation\"}\nWhile these are not always equal, we can match many rows and then figure out what to do with mismatches later.\n:::\n\n## A needed explanation {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p><br></p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">**`WHSE`**</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`DATE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`DATE`</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`ORIGIN_WHSE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`SHIP_WHSE`</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {data-id=\"stop1\"}\n<p align=\"right\">`STOP`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {data-id=\"stop2\"}\n<p align=\"left\">`STOP`</p>\n:::\n:::\n::::\n\n::: {data-id=\"explanation\"}\nThere should always be a matching store number.\n:::\n\n## A needed explanation {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p><br></p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">**`WHSE`**</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`DATE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`DATE`</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`ORIGIN_WHSE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`SHIP_WHSE`</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`STOP`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`STOP`</p>\n:::\n:::\n::::\n\n::: {data-id=\"explanation\"}\nWhat about the leftover rows? This method only matched ~66% of the items to trips.\n:::\n\n## Matching `WHSE` type {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {data-id=\"trips\"}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n::: {data-id=\"date1\"}\n<p align=\"right\">`DATE`</p>\n:::\n::: {data-id=\"origin_whse\" text-align=\"right\"}\n<p align=\"right\">`ORIGIN_WHSE`<br>`%/% 100`</p>\n:::\n::: {data-id=\"stop1\" text-align=\"right\"}\n<p align=\"right\">`STOP`</p>\n:::\n:::\n\n::: {.column width=\"10%\"}\n<p><br></p>\n<p align=\"center\">==</p>\n<p align=\"center\">==</p>\n<p><br></p>\n<p align=\"center\">==</p>\n:::\n\n::: {.column width=\"45%\"}\n::: {data-id=\"whse\"}\n<p align=\"left\">**`WHSE`**</p>\n:::\n::: {data-id=\"date2\"}\n<p align=\"left\">`DATE`</p>\n:::\n::: {data-id=\"ship_whse\"}\n<p align=\"left\">`SHIP_WHSE`<br>`%/% 100`</p>\n:::\n::: {data-id=\"stop2\"}\n<p align=\"left\">`STOP`</p>\n:::\n:::\n::::\n\n## A needed explanation {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p><br></p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">**`WHSE`**</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`DATE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`DATE`</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`ORIGIN_WHSE`<br>`%/% 100`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`SHIP_WHSE`<br>`%/% 100`</p>\n:::\n:::\n::::\n\n::: {data-id=\"explanation\"}\nA `WHSE_ID` (XYZZ) is made up of three parts. The first digit denotes that the facility is a warehouse, the second the warehouse type, the last two the unique ID. Matching the first two digits will give you matching warehouse types. Produce/produce, frozen/frozen, HV/HV, LV/LV, etc.\n:::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`STOP`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`STOP`</p>\n:::\n:::\n::::\n\n## A needed explanation {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p><br></p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">**`WHSE`**</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`DATE`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`DATE`</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`ORIGIN_WHSE`<br>`%/% 100`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`SHIP_WHSE`<br>`%/% 100`</p>\n:::\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"right\">`STOP`</p>\n:::\n:::\n::: {.column width=\"10%\"}\n<p align=\"center\">==</p>\n:::\n::: {.column width=\"45%\"}\n::: {}\n<p align=\"left\">`STOP`</p>\n:::\n:::\n::::\n\n::: {data-id=\"explanation\"}\nThis still leaves about 10% of the items without costs.\n:::\n\n## Forgetting about warehouses {auto-animate=true}\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n::: {data-id=\"trips\"}\n<p align=\"right\">**`TRIPS`**</p>\n:::\n::: {data-id=\"date1\"}\n<p align=\"right\">`DATE`</p>\n:::\n::: {data-id=\"stop1\" text-align=\"right\"}\n<p align=\"right\">`STOP`</p>\n:::\n:::\n\n::: {.column width=\"10%\"}\n<p><br></p>\n<p align=\"center\">==</p>\n<p align=\"center\">==</p>\n:::\n\n::: {.column width=\"45%\"}\n::: {data-id=\"whse\"}\n<p align=\"left\">**`WHSE`**</p>\n:::\n::: {data-id=\"date2\"}\n<p align=\"left\">`DATE`</p>\n:::\n::: {data-id=\"stop2\"}\n<p align=\"left\">`STOP`</p>\n:::\n:::\n::::\n\n::: {data-id=\"explanation\"}\nEvery item still needs a cost allocated, but since we have no way to link a trip and an item, we'll just have to hope for the best and make do with what we have.\n:::\n\n## Summing up\n\n::: {.incremental}\n1) Match on `DATE`, `STOP`, and `ORIGIN_WHSE`/`SHIP_WHSE`\n2) Match on `DATE`, `STOP`, and derived warehouse type\n3) Match on `DATE` and `STOP`\n:::\n\n# Designing a pipeline\n\nA generic guide\n\n## Designing a pipeline {auto-animate=true}\n\n::: {.incremental}\n1) Examine your source data\n2) Envision your end data format\n3) Design backwards then code forwards\n:::\n\n## Designing a pipeline {auto-animate=true}\n\n::: {.fragment .shrink}\nHow can we go from this...\n\n::: {.cell hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-1_2be138bf898f2ff97d7f9aff0696034d'}\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n:::\n\n:::\n::: {.fragment .fade-up .smaller}\n...to this?\n\n::: {.cell layout-align=\"center\" hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-2_43e6d549552f0e0b7a783d0ab39ec0fb'}\n::: {.cell-output-display}\n![](2022-10-29-dsba-club-presentation_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n\n## Examine the data\n\n\n::: {.cell hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-3_0c238755fb3ead119370832de967e8b2'}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n:::\n\n\n## Envision the end data format\n\n\n::: {.cell hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-4_8629a974a70bde581509c64906f142fd'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 3\n  cyl   name  value\n  <fct> <chr> <dbl>\n1 4     disp  105. \n2 4     mpg    26.7\n3 6     disp  183. \n4 6     mpg    19.7\n5 8     disp  353. \n6 8     mpg    15.1\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-5_cfa4287b44744ef310ed7bb784959e63'}\n::: {.cell-output-display}\n![](2022-10-29-dsba-club-presentation_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## Working backwards {auto-animate=true}\n\n\n::: {.cell hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-6_7c6dfbdc14fcd84b3d68cc2af317972a'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmtcars |>\n  ggplot() +\n    geom_bar(aes(x = cyl, y = value, fill = name), \n             stat = \"identity\", position = \"dodge\")\n```\n:::\n\n\n## Working backwards {auto-animate=true}\n\n\n::: {.cell hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-7_88e33a336ef1eada9d251741f85cff52'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n  \nmtcars |>\n  mutate(cyl = as.factor(cyl)) |>\n  ggplot() +\n    geom_bar(aes(x = cyl, y = value, fill = name), \n             stat = \"identity\", position = \"dodge\")\n```\n:::\n\n\n## Working backwards {auto-animate=true}\n\n\n::: {.cell hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-8_d12e1555320a6dce858f9cccc7ff0cbc'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmtcars |>\n  group_by(cyl) |>\n    summarise(disp = mean(disp),\n              mpg = mean(mpg)) |>\n    ungroup() |>\n  mutate(cyl = as.factor(cyl)) |>\n  ggplot() +\n    geom_bar(aes(x = cyl, y = value, fill = name), \n             stat = \"identity\", position = \"dodge\")\n```\n:::\n\n\n## Working backwards {auto-animate=true}\n\n\n::: {.cell hash='2022-10-29-dsba-club-presentation_cache/revealjs/unnamed-chunk-9_842be3880d638c28ed2c0630c63f79d7'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmtcars |>\n  group_by(cyl) |>\n    summarise(disp = mean(disp),\n              mpg = mean(mpg)) |>\n    ungroup() |>\n  pivot_longer(cols = c(disp, mpg),\n               names_to = \"name\",\n               values_to = \"value\") |>\n  mutate(cyl = as.factor(cyl)) |>\n  ggplot() +\n    geom_bar(aes(x = cyl, y = value, fill = name), \n             stat = \"identity\", position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](2022-10-29-dsba-club-presentation_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n# 2022-10-29 DSBA Club\n\nGus Lipkin",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}