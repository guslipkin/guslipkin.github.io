[
  {
    "objectID": "posts/2022-02-23-making-pretty-excel-files-in-r.html",
    "href": "posts/2022-02-23-making-pretty-excel-files-in-r.html",
    "title": "Making Pretty Excel Files in R",
    "section": "",
    "text": "It’s a tale as old as time. Your boss gave you a bunch of Excel files and you painstakingly made a bot that will import and display them in a Shiny dashboard. Proud of your work, you take it to your boss and they say “I don’t know what a ‘Shiny’ is, can’t you just give me one of those Excels back?” openxlsx makes this easy.\nToday we’re going to recreate an existing workbook with openxlsx. To get started, I made a small .xlsx file for us to work with that can be downloaded here. It’s an attendance list and some notes on supplies you’ll need for a company barbecue. Feel free to get familiar with it then come back here when you’re ready.\n\n\n\n\n\n\n\n(a) The attendance sheet\n\n\n\n\n\n\n\n(b) The supplies sheet\n\n\n\n\nFigure 1: A preview of the Attendance and Supplies sheets\n\n\n\nAs usual, the first thing to do is load our library with library(openxlsx). We can try and load the workbook, the Excel file, with read.xlsx, but for now we’re going to use loadWorkbook. This loads a workbook object and exposes some workbook properties to us rather than just the raw data like with read.xlsx.\n\n# load openxlsx\nlibrary(openxlsx)\n# get the sheet names\nbbq <- loadWorkbook(filePath)\nnames(bbq)\n\n# load the sheets and preview them\nattendance <- readWorkbook(bbq, \"Attendance\")\nhead(attendance)\n\nsupplies <- readWorkbook(bbq, sheet = \"Supplies\")\nhead(supplies)\n\n[1] “Attendance” “Supplies”\n\n\n\n\nName\nRSVPed\nStatus\nFoodPreference\n\n\n\n\n1\nMasud Durga\nTRUE\nNo\nNA\n\n\n2\nStanislav Zillah\nTRUE\nYes\nHotdog\n\n\n3\nJoaquina Aristide\nFALSE\nNA\nNA\n\n\n4\nIuppiter Dieu\nTRUE\nYes\nHotdog\n\n\n5\nHari Evgenios\nTRUE\nYes\nHamburger\n\n\n6\nShaina Gwenaelle\nTRUE\nYes\nHotdog\n\n\n\n\nThe attendance data.frame\n\n\n\n\n\nSupplyType\nQuantity\nPerPackage\nPackagesNeeded\nLeftover\n\n\n\n\n1\nHotdogs\n34\n10\n4\n6\n\n\n2\nHotdog buns\nNA\n8\n5\n6\n\n\n3\nHamburgers\n36\n6\n6\n0\n\n\n4\nHamburger buns\nNA\n8\n5\n4\n\n\n\n\nThe supplies data.frame\n\nBecause we loaded the data as a workbook object, we can use getStyles to load the styles and preview them. Unfortunately, the styles can’t pull conditional formatting and don’t keep track of which cells use which styles. By cross referencing the list of styles and bbq.xlsx, we can identify some styles to use and them assign them each to a variable.\n\n# getStyles and set them appropriately\nstyles <- getStyles(bbq)\nstyles\n\n# doesn't work for colors because those are conditional formatting\nheaderStyle <- styles[[1]]\nnumberStyle <- styles[[7]]\n\nI’ve chosen to only show the first two items from the styles list here.\n[[1]]\nA custom cell style. \n\n Cell formatting: GENERAL \n Font name: Calibri \n Font size: 14 \n Font colour: 1 \n Font decoration: BOLD \n \n\n[[2]]\nA custom cell style. \n\n Cell formatting: GENERAL \n Cell horz. align: center\nFirst thing we have to do is create a workbook object that we’ll call wb. We can quickly preview it by just typing wb into our chunk or the console.\n\n# create workbook and check contents\nwb <- createWorkbook()\nwb\n\nA Workbook object.\n \nWorksheets:\n No worksheets attached\n\n\n\nWe’re going to make the Supplies sheet first as it’s a little bit easier. We first add a new worksheet named Supplies to the workbook, then we can write the relevant data to that sheet along with styling our column headers using headerStyle from earlier.\n\n# create the supplies sheet and check for it\naddWorksheet(wb = wb, sheetName = \"Supplies\")\n# write supplies to the worksheet using headerStyle\nwriteData(wb = wb, sheet = \"Supplies\", x = supplies, headerStyle = headerStyle)\n\nAll of the numbers in the Supplies sheet are centered both horizontally and vertically. We can achieve this by adding the numberStyle from before to those cells. rows and cols both start at 2 because row one is the header row and column one is the supply type. rows goes to 5 because there are 4 rows of numbers (remember the header row) and cols goes to 5 because there are 4 columns of numbers. gridExpand = TRUE makes sure that all cell reference combinations possible with rows and cols are used, rather than doing an entire row or column.\n\n# add numberStyle\naddStyle(wb = wb, sheet = \"Supplies\", style = numberStyle, rows = 2:5, \n         cols = 2:5, gridExpand = TRUE)\n\nIf we go back to our data in R, the Quantity for Hotdog buns and Hamburger buns is empty. A bit further back, we see that that’s because those cells were merged with the Quantity of Hotdogs and Hamburgers respectively. We can replicate this using mergeCells. Unlike addStyle, we don’t need to use gridExpand to merge all the cells as it is implied. cols will be 2 for both and we want rows 2 and 3 for Hotdogs and rows 4 and 5 for Hamburgers.\n\n# merge the hamburger and hotdog quantity cells\nmergeCells(wb = wb, sheet = \"Supplies\", cols = 2, rows = 2:3)\nmergeCells(wb = wb, sheet = \"Supplies\", cols = 2, rows = 4:5)\n\nOur last step on this worksheet is to set the column widths to auto. We again need to specify cols and can just do 1:5 so that all columns are affected.\n\n# set column widths to auto\nsetColWidths(wb = wb, sheet = \"Supplies\", cols = 1:5, widths = \"auto\")\n\nOu Supplies sheet is now complete, but we’re not going to write it just yet because we still need to do the Attendance sheet.\n\nLike before, we first add the Attendance worksheet and write the data to it.\n\n# create the attendance sheet and check for it\naddWorksheet(wb = wb, sheetName = \"Attendance\")\n\n# write attendance to the worksheet using the same headerStyle from before\nwriteData(wb = wb, sheet = \"Attendance\", x = attendance, \n          headerStyle = headerStyle)\n\nThe RSVPed and Status columns each have some conditional formatting. We can reuse the color formatting from the RSVPed column on the Status column, so we’re going to separate the color style from the alignment style. It was easy to see how many rows we have in the Supplies sheet but not here so we’re going to create a new variable that has the rowNumbers. Again, we start on row 2 because of the header row and will end at our last data row plus 1.\n\n# create color styles for rsvp and status\ngoodStyle <- createStyle(fontColour = \"#006100\", bgFill = \"#C6EFCE\")\nbadStyle <- createStyle(fontColour = \"#9C0006\", bgFill = \"#FFC7CE\")\n# create center style for rsvp column\ncenterStyle <- createStyle(halign = \"center\")\n\n# create a variable of row numbers\nrowNumbers <- seq(2, nrow(attendance) + 1, by = 1)\n\nOur first step is to center the values in the RSVPed column with an addStyle. Next, while we could manually color each cell using a for loop, it’s more efficient to use conditionalFormatting. This also has the added bonus of showing in Excel and responding to any changes. The rule argument may be a little strange, and that’s because it must match how the same formatting rule would be written in Excel. In this case, we use our top-leftmost cell as the reference cell in the rule, B2, then we check if it is TRUE or FALSE. When the rule is applied down the cells in column B, the row number will change to match the current row.\n\n# center the column values\naddStyle(wb = wb, sheet = \"Attendance\", \n         style = centerStyle, cols = 2, rows = rowNumbers)\n\n# IF `RSVPed` is TRUE, set it to green. IF FALSE, set it to red\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 2, \n                      rows = rowNumbers, rule = \"B2==TRUE\", style = goodStyle)\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 2, \n                      rows = rowNumbers, rule = \"B2==FALSE\", style = badStyle)\n\nThe Status column is very similar to the RSVPed column, but we add a style for Tentative responses and then need a third conditionalFormatting. The newest part here is in the rule argument. We need to put quotes around Yes so that Excel knows that it is a string and need to use \\\" so that R knows that the quote is part of the string. Once our formatting has been applied, we set the column widths as we did before.\n\n# add style for status and tentative\nmaybeStyle <- createStyle(fontColour = \"#9C6500\", bgFill = \"#FFEB9C\")\n\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 3, \n                      rows = rowNumbers, rule = \"C2==\\\"Yes\\\"\", \n                      style = goodStyle)\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 3, \n                      rows = rowNumbers, rule = \"C2==\\\"No\\\"\", \n                      style = badStyle)\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 3, \n                      rows = rowNumbers, rule = \"C2==\\\"Tentative\\\"\", \n                      style = maybeStyle)\n\n# set column widths to auto\nsetColWidths(wb = wb, sheet = \"Attendance\", cols = 1:4, widths = \"auto\")\n\nThe last thing we need to do is reorder the worksheets so that Attendance is first because when we created the workbook in R, we created the Supplies worksheet first. Unfortunately, worksheetOrder only supports integer vectors. We can check our worksheet numbers by calling the object again through either the chunk or console. Then we set the worksheet order and save the workbook to an .xlsx file.\n\n# check the workbook sheet order\nwb\n\nA Workbook object.\n \nWorksheets:\n Sheet 1: \"Supplies\"\n \n    Custom column widths (column: width)\n      1: auto, 2: auto, 3: auto, 4: auto, 5: auto \n \n\n Sheet 2: \"Attendance\"\n \n    Custom column widths (column: width)\n      1: auto, 2: auto, 3: auto, 4: auto \n \n\n \n Worksheet write order: 1, 2\n Active Sheet 1: \"Supplies\" \n    Position: 1\n\n# change the order\nworksheetOrder(wb) <- c(2, 1)\n\n# save the workbook\nsaveWorkbook(wb, \"newBBQ.xlsx\", overwrite = TRUE)\n\nIf we open the new file, we can see that they are nearly identical. The biggest difference between the two is that the original used formulas to calculate the values in Supplies.\nIf you did want to take it a step further and use those instead, the writeFormula function is your friend. In any case, I highly encourage everyone to at least skim through the openxlsx documentation here because it has so much to offer to help streamline Excel file generation.\n\nAll the code for this article is available here. If you want to see more from me, check out my GitHub or guslipkin.github.io. If you want to hear from me, I’m also on Twitter @guslipkin.\n\nGus Lipkin is a Data Scientist, Business Analyst, and occasional bike mechanic"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\napply\n\n\n\n\nLearning when and how to use for loops, the apply family, and vectorization to write fast code in R\n\n\n\n\n\n\nMar 14, 2022\n\n\nGus Lipkin\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nopenxlsx\n\n\n\n\nUsing the openxlsx package in R and RStudio to make formatted Excel files\n\n\n\n\n\n\nFeb 23, 2022\n\n\nGus Lipkin\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\ntidyverse\n\n\nggplot2\n\n\n\n\nUsing R and ggplot2 to create stacked and grouped column charts\n\n\n\n\n\n\nFeb 16, 2022\n\n\nGus Lipkin\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Me",
    "section": "",
    "text": "Name*\n\n\n\nCompany\n\n\n\nEmail*\n\n\n\nMessage*\n\n\n\n\n Sending this form will take you to an external thank you page\n\n\nSend"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "My Résumé",
    "section": "",
    "text": "Gus Lipkin\n\n\n\n\n\nFlorida Polytechnic University\n\n\nAug 2018 - May 2022\n\n\n\n– Bachelor of Science, Business Analytics with concentrations in Quantitative Economics & Econometrics and Intelligent Mobility  – Associate of Arts\n\n\nSelected Courses\n\n\n\n\n\n\nDatabase I & II\n\n\n\n\n\n\nStrategic Management\n\n\n\n\n\n\nSix Sigma\n\n\n\n\n\n\nProgramming I\n\n\n\n\n\n\nOperations and Supply Chain & Operations Research\n\n\n\n\n\n\nTime Series Modeling and Forecasting\n\n\n\n\n\n\nStatistics, Quantitative Methods, & Statistical Learning\n\n\n\n\n\n\nBenefit Cost Analysis & Economic Analysis\n\n\n\n\n\n\nSoftware and Programming\n\n\n\n\n\nR and RStudio\n\n\n\n\n\n\nSQL, Redis, Neo4J\n\n\n\n\n\n\nStata\n\n\n\n\n\n\nApache Spark\n\n\n\n\n\n\n\nSoftware Quality Assurance Analyst  – AssistRx\n\n\nJan 2022 - Present\n\n\n\n\nCreate and execute test plans to discover software problems and their causes\n\n\nDocument and demonstrate software features to internal and external users\n\n\n\n\nData Science Project Team Lead  – Tallahassee Memorial Healthcare\n\n\nAug 2021 - Present\n\n\n\n\nCorrelate patient feedback to avoidable readmissions and patient experience\n\n\nWork with capstone sponsor to define project timeline and goals\n\n\nAnalyze discharge survey data to find correlations between responses and readmission rates using R and RStudio\n\n\n\n\nResearch Intern  – iCompBio\n\n\nMay 2021 - Aug 2021\n\n\n\n\nInvestigate the spatio-temporal relationship of different climate variables with the spread of SARS-CoV-2 using GIS and multivariate regressions\n\n\nGather and process time series data of geospatial climate variables and SARS-CoV-2 data\n\n\nAnalyze data in ArcGIS to investigate variable relationships\n\n\n\n\nData Analyst and Assistant Project Manager  – Draken International\n\n\nDec 2020 - Sep 2021\n\n\n\n\nOversee a team of interns and supervise data transition efforts\n\n\nCoordinate with project managers to ensure a successful data migration\n\n\nCreate and run weekly parts availability analysis and reports using R and RStudio\n\n\n\n\nResearch Assistant  – Florida Polytechnic University\n\n\nMay 2020 - Aug 2020\n\n\n\n\nAssist in all facets of research, including but not limited to, data transcription, analysis in R and RStudio, and writing reports\n\n\nAttend daily meetings to give updates on project progress and discuss data discoveries\n\n\n\n\n\nStudent Body Vice-President  – Florida Polytechnic University Student Government Association\n\n\nJan 2022 - Present\n\n\n\n\nAct as the Chief Services Officer of the Student Body\n\n\nAssist the Student Body President in the conduct of government\n\n\nStay in communication with all SGA departments and organizations\n\n\n\n\nDirector of Standards and Enforcement  – Florida Polytechnic University Student Government Association\n\n\nMay 2020 - Jan 2022\n\n\n\n\nManage the SGA SharePoint and CampusLabs\n\n\nTrack SGA and Registered Student Organization assets\n\n\nMaintain FLPolySGA.github.io"
  },
  {
    "objectID": "posts/2022-03-14-writing-faster-r-with-vectorization-and-the-apply-family.html",
    "href": "posts/2022-03-14-writing-faster-r-with-vectorization-and-the-apply-family.html",
    "title": "Writing Faster R With Vectorization and the Apply Family",
    "section": "",
    "text": "Link to the Medium post\nOne of my favorite things about R is that there are a lot of ways to do the same thing. Of course, this means that some ways are better than others depending on the use case. for loops, the apply family, and vectorization are all common ways to write code for large amounts of data in R, but it can be tricky to know when to use each one and how to use them.\nI’ve divided this post into how to use each method in R and then give a few examples of when you might want to use each one. I close everything out with a short benchmark demonstration to compare the three."
  },
  {
    "objectID": "posts/2022-03-14-writing-faster-r-with-vectorization-and-the-apply-family.html#what-is-an",
    "href": "posts/2022-03-14-writing-faster-r-with-vectorization-and-the-apply-family.html#what-is-an",
    "title": "Writing Faster R With Vectorization and the Apply Family",
    "section": "What is a(n)…",
    "text": "What is a(n)…\n\nfor loop\nIf you’re familiar with programming, you can probably skip this section.\nA for loop lets you run the same code a specified number of times. The structure generally follows for(x in y) where x represents an item in y. If we think about a shopping basket with some apples, bananas, and carrots, we could write for(food in basket) and food would represent each item in our basket. It would be apples the first time, bananas the second time, and carrots the third time. We could also write it as for(food in 1:length(basket)) where 1:length(basket) is a vector of numbers that counts the items in your basket. Rather than food representing an item in your basket, it represents an index in the vector. In this example, apples are at index 1, bananas at 2, and carrots at 3. for loops are also very flexible and can be used on many data types such as vectors, data.frames, and matrices.\nLet’s say you have a data.frame called basket that has three columns. It has the Food column with the name of the food, the PricePerUnit which has the unit cost for each food, and Quantity which has the number of units of each food in your basket. It looks like this:\n\n\n\nFood\nPricePerUnit\nQuantity\n\n\n\n\nApples\n0.99\n12\n\n\nBananas\n0.19\n6\n\n\nCarrots\n0.49\n2\n\n\n\nAnd it can be recreated with this:\n\nbasket <- data.frame(\"Food\" = c(\"Apples\", \"Bananas\", \"Carrots\"),\n                     \"PricePerUnit\" = c(.99, .19, .49),\n                     \"Quantity\" = c(12, 6, 2))\n\nIf we wanted to get the total cost of everything in our basket, we could iterate over each row multiplying the PricePerUnit and Quantity and adding those to our running totals.\n\n# create the total\ntotal <- 0\n# loop over the data.frame and add the running total\nfor(row in 1:nrow(basket))\n  total <- total + (basket$PricePerUnit[row] * basket$Quantity[row])\ntotal\n\n[1] 14\n\n\n\n\napply family\nThe apply family is part of base R and very similar to a for loop. Rather than running a set number of times, an apply runs a function on each item in a data.frame, list, vector, or other object that can be applied to. While there are six different functions in the apply family, I’m only going to talk about the three most common; apply, lapply, and sapply.\nThe biggest differences between the three is the types of input that they accept and their output types. apply takes in a data.frame or matrix and has three function arguments. The first argument, x, is the object we’re passing to it. The second argument is a number, either 1 or 2 or c(1, 2), that says if we want the function applied to rows, columns, or both rows and columns, respectively. The last argument is the function call. sapply and lapply are the same, except they don’t have the second argument because they take either a vector or list which don’t have multiple dimensions. Generally speaking, the apply family will return a vector, list, or array of some kind.\nIf we go back to the shopping basket example, we can calculate the total with an apply function. Our first argument is the basket, the second is a 1 because we want to apply to every row, and the last is the function call. We can create the function in the apply call or we can create it earlier and then call it here.\n\n# multiply each PricePerUnit and Quantity and store the resulting vector\nperItemTotal <- apply(basket, 1, function(bskt) {\n  as.numeric(bskt[\"PricePerUnit\"]) * as.numeric(bskt[\"Quantity\"])\n})\n# sum all values in the perItemTotal\nsum(perItemTotal)\n\n[1] 14\n\n\nA quick note on function calls in the apply family:\nIf a function call only has one argument, they can be done in three ways. 1. sapply(X, function(x) { ... }) if function is not predefined 2. sapply(X, function) if function is predefined 3. sapply(X, function(x)) if function is predefined\nOption two is most common for built-in functions such as sum or as.numeric, but can be used with any function.\n\n\nVector Operations\nVector operations are not a function like the apply family or a for loop, but rather a feature of the R language. Instead of operating on a vector one item at a time, R is able to do an operation on the entire vector in one line of code. Back to the basket example again, we know that the per item total is the PricePerUnit and Quantity multiplied together, and then we get the grand total by summing all of those values.\n\n# take the sum of multiplying PerPriceUnit and Quantity to get total cost\nsum(basket$PricePerUnit * basket$Quantity)\n\n[1] 14"
  },
  {
    "objectID": "posts/2022-03-14-writing-faster-r-with-vectorization-and-the-apply-family.html#when-should-i-use-an",
    "href": "posts/2022-03-14-writing-faster-r-with-vectorization-and-the-apply-family.html#when-should-i-use-an",
    "title": "Writing Faster R With Vectorization and the Apply Family",
    "section": "When should I use a(n)…",
    "text": "When should I use a(n)…\nThese examples are not exhaustive and you may find some cases where one is better than the others even where it seems like it might not be.\n\nfor loop\nfor loops in R should be a last resort. They are much slower compared to the apply family and vectorized code. They may be helpful when each iteration relies on the iteration before it, although then you might want to look into a recursive function if possible. You might find a for loop useful if you need to run the same block of code multiple times or iterate over elements of an object in a non-standard way such as every other item. Any code that can be written with an apply function or a vector operation can be written in a for loop.\n\n\napply family\nThe apply family should be used when you want to operate on each element of an object, but treat them individually. This might present as a list with vectors of differing lengths for each item or if you want a specific type of output. Any vector operation can be written as an apply statement, but not all for loops can be converted.\n\n\nVector Operations\nVector operations are the gold standard. They are fast and can be used in many cases, but not all. Most common use cases will be on vectors or columns of a data.frame. Many base functions such as sum and as.numeric are already vectorized. Many but not all for loops and apply functions can be written as vectorized operations."
  },
  {
    "objectID": "posts/2022-03-14-writing-faster-r-with-vectorization-and-the-apply-family.html#benchmarks",
    "href": "posts/2022-03-14-writing-faster-r-with-vectorization-and-the-apply-family.html#benchmarks",
    "title": "Writing Faster R With Vectorization and the Apply Family",
    "section": "Benchmarks",
    "text": "Benchmarks\n\nBuilding the input\nRather than use the simple shopping basket example from before, I’ve written a small function that takes a data.frame of red, green, and blue values and adds a new column with the corresponding hex code.\n\n# create a vector of the possible hex code values (0-9 and A-F)\nhex <- c(0:9, LETTERS[1:6])\n\n# set the seed\nset.seed(2022)\n# pick the number of rows\nrows <- 10^4\n# create a data.frame of rgb values\ndf <- data.frame(\"red\" = sample(0:255, rows, replace = TRUE), \n                 \"green\" = sample(0:255, rows, replace = TRUE),\n                 \"blue\" = sample(0:255, rows, replace = TRUE))\n\nAnd the resulting data should look like this:\n\n\n\nred\ngreen\nblue\n\n\n\n\n227\n18\n84\n\n\n178\n245\n26\n\n\n205\n219\n176\n\n\n54\n236\n205\n\n\n74\n252\n67\n\n\n195\n116\n122\n\n\n\nWe’ve also created a vector of values that can go in a hex code with numbers 0–9 and letters A-F.\n\n\nCreating the conversion function\nI used this website for the math behind my functions. In essence, you divide each number by 16 and round down and the resulting number corresponds to a position in hex. You then take the remainder of the division and get the hex value that that number corresponds to. If our value is 227, then our first hex code is 227/16 would round down to 14 and the remainder would be 3. Because vectors in R start at position 1, we add one to both for 15 and 4. The corresponding values in hex are E and 3 and so the hex pair for 227 is E3.\n\n\nImplementing the conversion function\n\nIn a for loop\n\n# iterate over each row in df\nfor(r in 1:nrow(df)) {\n  # get a value for each position in the hex code\n  # first pair\n  h1 <- hex[floor(df$red[r] / 16) + 1]\n  h2 <- hex[df$red[r] %% 16 + 1]\n  \n  # second pair\n  h3 <- hex[floor(df$green[r] / 16) + 1]\n  h4 <- hex[df$green[r] %% 16 + 1]\n\n  # third pair\n  h5 <- hex[floor(df$blue[r] / 16) + 1]\n  h6 <- hex[df$blue[r] %% 16 + 1]\n  \n  # assemble the values using `paste0` and assign it to the `hex` column for \n  # the corresponding row\n  df$hex[r] <- paste0(\"#\", h1, h2, h3, h4, h5, h6)\n}\n\n\n\nIn an apply function\n\ndf <- df[, c(\"red\", \"green\", \"blue\")]\n# create the rgbToHex function that takes a named vector and returns a hex code\nrgbToHex <- function(x) {\n  # get a value for each position in the hex code\n  # first pair\n  h1 <- hex[floor(x[\"red\"] / 16) + 1]\n  h2 <- hex[x[\"red\"] %% 16 + 1]\n  \n  # second pair\n  h3 <- hex[floor(x[\"green\"] / 16) + 1]\n  h4 <- hex[x[\"green\"] %% 16 + 1]\n\n  # third pair\n  h5 <- hex[floor(x[\"blue\"] / 16) + 1]\n  h6 <- hex[x[\"blue\"] %% 16 + 1]\n  \n  # assemble and return the hex code\n  paste0(\"#\", h1, h2, h3, h4, h5, h6)\n}\n# call `rgbToHex` and apply it to each row in df\ndf$hex <- apply(df, 1, rgbToHex)\n\n\n\nIn a vectorized function\n\n# paste the calculated hex codes into the new `hex` column in df\ndf$hex <- paste0(\"#\", \n                 hex[floor(df$red / 16) + 1],\n                 hex[df$red %% 16 + 1],\n                 hex[floor(df$green / 16) + 1],\n                 hex[df$green %% 16 + 1],\n                 hex[floor(df$blue / 16) + 1],\n                 hex[df$blue %% 16 + 1])\n\n\n\nThe results\n\n\n\nred\ngreen\nblue\nhex\n\n\n\n\n227\n18\n84\n#E31254\n\n\n178\n245\n26\n#B2F51A\n\n\n205\n219\n176\n#CDDBB0\n\n\n54\n236\n205\n#36ECCD\n\n\n74\n252\n67\n#4AFC43\n\n\n195\n116\n122\n#C3747A\n\n\n\n\n\n\nRunning the benchmark\nI’ve simplified the for loop and apply implementations a little bit to better match the vectorized function. This way we have a better comparison between the three. Your benchmark results may be a little different because it is a little dependent on your computer.\n\nrows <- 10^4\nhex <- c(0:9, LETTERS[1:6])\n\nset.seed(2022)\ndt <- data.frame(\"red\" = sample(0:255, rows, replace = TRUE), \n                 \"green\" = sample(0:255, rows, replace = TRUE),\n                 \"blue\" = sample(0:255, rows, replace = TRUE))\n\nrbenchmark::benchmark(\n  \"for loop\" = {\n    df <- dt\n    for (r in 1:nrow(df)) {\n      df$hexFor[r] <- paste0(\"#\", \n                             hex[floor(df$red[r] / 16) + 1],\n                             hex[df$red[r] %% 16 + 1],\n                             hex[floor(df$green[r] / 16) + 1],\n                             hex[df$green[r] %% 16 + 1],\n                             hex[floor(df$blue[r] / 16) + 1],\n                             hex[df$blue[r] %% 16 + 1]\n                             )\n    }\n  },\n  \"apply\" = {\n    df <- dt\n    rgbToHex <- function(x) {\n      paste0(\"#\",\n             hex[floor(x[\"red\"] / 16) + 1],\n             hex[x[\"red\"] %% 16 + 1],\n             hex[floor(x[\"green\"] / 16) + 1],\n             hex[x[\"green\"] %% 16 + 1],\n             hex[floor(x[\"blue\"] / 16) + 1],\n             hex[x[\"blue\"] %% 16 + 1]\n             )\n    }\n    df$hexApply <- apply(df, 1, rgbToHex)\n  },\n  \"vector\" = {\n    df <- dt\n    df$hexVector <- paste0(\"#\",\n                           hex[floor(df$red / 16) + 1],\n                           hex[df$red %% 16 + 1],\n                           hex[floor(df$green / 16) + 1],\n                           hex[df$green %% 16 + 1],\n                           hex[floor(df$blue / 16) + 1],\n                           hex[df$blue %% 16 + 1]\n                           )\n  },\n  replications = 10, order = \"relative\"\n) -> benches\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntest\nreplications\nelapsed\nrelative\nuser.self\nsys.self\nuser.child\nsys.child\n\n\n\n\nvector\n10\n0.026\n1.000\n0.025\n0.000\n0\n0\n\n\napply\n10\n0.536\n20.615\n0.530\n0.006\n0\n0\n\n\nforloop\n10\n1.569\n60.346\n1.252\n0.317\n0\n0\n\n\n\nThe important column is relative as that shows a comparison between the three with the quickest function given a value of 1. Using an apply function took roughly 20x longer and a for loop roughly 60x longer than using a vectorized function.\n\n\nThe code for all the charts in this article is available here. If you want to see more from me, check out my GitHub or guslipkin.github.io. If you want to hear from me, I’m also on Twitter @guslipkin.\n\nGus Lipkin is a Data Scientist, Business Analyst, and occasional bike mechanic"
  },
  {
    "objectID": "posts/2022-02-16-grouped-and-stacked-bar-charts-in-r.html",
    "href": "posts/2022-02-16-grouped-and-stacked-bar-charts-in-r.html",
    "title": "Grouped and Stacked Bar Charts in R",
    "section": "",
    "text": "Sometimes you have a chart that looks like one of these. You have a grouped chart that shows one thing and a stacked chart that shows another. But you really want to show the continent of origin and the condition in one chart.\n\n\n\n\n\n\n\n(a) A grouped bar chart\n\n\n\n\n\n\n\n(b) A stacked bar chart\n\n\n\n\nFigure 1: A grouped bar chart and a stacked bar chart\n\n\nMaybe the chart you want looks a lot like this:\n\n\n\nThe chart that we will learn to build\n\n\n\nFirst we load ggplot2 so we can make our charts. Then we make some data and preview it. set.seed(2022) makes sure that our data is the same every time.\n\nlibrary(ggplot2)\n\nset.seed(2022)\nspecie <- c(rep(\"sorgho\", 6), rep(\"poacee\", 6), \n            rep(\"banana\", 6), rep(\"triticum\", 6))\ncondition <- rep(c(\"normal\" , \"stress\" , \"N2\") , 8)\ncontinent <- rep(c(\"Europe\", \"Africa\", \"Asia\", \"South America\",          \n                   \"North America\", \"Australia\"), 4)\nvalue <- abs(rnorm(24 , 0 , 15))\ndata <- data.frame(specie, condition, continent, value)\nhead(data)\n\n\nCreating the data\n\n\n\n\n\nspecie\ncondition\ncontinent\nvalue\n\n\n\n\n1\nsorgho\nnormal\nEurope\n33.2982559377826\n\n\n2\nsorgho\nstress\nAfrica\n7.4199245988712\n\n\n3\nsorgho\nN2\nAsia\n52.3689859681817\n\n\n4\nsorgho\nnormal\nSouth America\n4.85975695583929\n\n\n5\nsorgho\nstress\nNorth America\n6.84424418650998\n\n\n6\nsorgho\nN2\nAustralia\n6.74199859289553\n\n\n\n\nPreviewing the data\n\nOur first instinct might be to throw both charts together using grid.arrange from the gridextra package. While this does show the information we want, it’s not pretty and doesn’t show the data the way we want it to.\n\none <- ggplot(data) +\n  geom_bar(aes(x = specie, y = value, fill = condition), \n           position = \"dodge\", stat = \"identity\")\ntwo <- ggplot(data) +\n  geom_bar(aes(x = specie, y = value, fill = continent), \n           position = \"stack\", stat = \"identity\")\ngridExtra::grid.arrange(one, two, nrow = 2)\n\n\n\n\n\nNot sure what to do, we come up with lots of plots that are almost right, but not quite.\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n(c)\n\n\n\n\nFigure 2: Three attempts at making a grouped and stacked bar chart\n\n\nThe last one looks like it could be promising. How did we do it?\n\nggplot(data) +\n  geom_bar(aes(x = condition, y = value, fill = continent),\n           position = \"stack\",\n           stat = \"identity\") +\n  facet_wrap(~ specie)\n\nWe use ggplot to set up the pipeline, geom_bar to create the bar chart, and then facet_wrap is what gives us the four separate charts in one, with one mini-chart for each species. If we can move the charts to be side-by-side, we’ll be a lot closer to the desired outcome. We can use facet_grid instead of facet_wrap to accomplish that.\n\nggplot(data) +\n  geom_bar(aes(x = condition, y = value, fill = continent),\n           position = \"stack\",\n           stat = \"identity\") +\n  facet_grid(~ specie)\n\n\n\n\nUsing facet_grid() to show multiple plots next to each other\n\n\n\n\nThis looks much better, but we want it to look like one cohesive plot, rather than four smaller plots.\n\nI’m going to show you the code that does it, then walk through it so everything makes sense.\n\nggplot(data) +\n  geom_bar(aes(x = condition, y = value, fill = continent),\n           position = \"stack\",\n           stat = \"identity\") +\n  facet_grid(~ specie, switch = \"x\") +\n  theme(strip.placement = \"outside\",\n        strip.background = element_rect(fill = NA, color = \"white\"),\n        panel.spacing = unit(-.01,\"cm\"))\n\n\n\n\nThe graph that we came here for\n\n\n\n\nThis looks pretty good and is exactly what we wanted. Like the charts before, we get 90% of the way there with ggplot, geom_bar, and facet_grid. The additions here are the switch = \"x\" argument in facet_grid, which moves the group panel with the species from the top of the chart to the bottom. Moving the strip.placement outside makes sure that the conditions are listed between the species and the chart. Making strip.background empty with a white border allows the group panel with the species to blend in with the white background of the chart. Lastly, changing the panel.spacing to -.01 removes the small gap between each panel so that the chart appears to be one cohesive unit.\n\nThe code for all the charts in this article is available <a here. If you want to see more from me, check out my GitHub or guslipkin.github.io. If you want to hear from me, I’m also on Twitter @guslipkin.\n\nGus Lipkin is a Data Scientist, Business Analyst, and occasional bike mechanic"
  },
  {
    "objectID": "about.html#a-brief-history",
    "href": "about.html#a-brief-history",
    "title": "About Me",
    "section": "A Brief History",
    "text": "A Brief History\n\n\nI was born and raised in Massachusetts about twenty minutes west of Boston. In elementary school, I spent my summers at circus camp where I learned to ride a unicycle, walk on stilts, a variety of other skills generally requiring a large soft pad at the bottom, and failing to figure out how to juggle. In fourth grade, I got so frustrated that I did a project on juggling so that I knew exactly what to do, but I’ve still never been able to get my hands to move the right way. During the fall and winter months, I did ballet and danced in a production of The Nutcracker. It was during our downtime then that I first learned to solve a Rubik’s cube. In middle school, I took part in an archery club after school and eventually began to mentor younger students and carried that on through high school. My junior year of high school, I help start the VEX robotics team and went to World Championships. I also became involved in TV production and joined the local channel.\n\n\n\n  A backstage photo from The Nutcracker (2009)\n\n\n\n\n  Working at Starbucks (2017)\n\n\n\nAfter graduating high school in 2015, I launched the archery program at a summer camp in Canada and designed and built a modular Gaga pit. (Gaga is sort of like a dodgeball battle-royale that you may recognize from an episode of Bob’s Burgers. I spent the next few years working at a Starbucks where I won my store’s Barista Championship in 2018 and 2019. During my time with the company, I quickly learned all the recipes and became one of the fastest and most reliable baristas in the store. Because of my knowledge and reliablity, I was asked to become a Barista Trainer and helped train baristas, supervisors, and store managers from across the district.\n\n\n I came to Florida Poly during Fall 2018 and the rest, as they say, is history. You can learn more about my time at Florida Poly and projects here and see my resume here."
  },
  {
    "objectID": "about.html#selected-interests",
    "href": "about.html#selected-interests",
    "title": "About Me",
    "section": "Selected Interests",
    "text": "Selected Interests\n\nBiking 🚴‍♂️🚵‍♂️\nMany years ago, there was a summer that I was on my bike so much that I didn’t even take my helmet off for meals. While my passion for biking certainly hasn’t waned, I don’t have as much time as I did when my biggest worries were making it home before dark. Until I moved to Florida, I volunteered for many years with the Pan-Mass Challenge, first as a tire pumper and then a mechanic as I developed my skills. More recently, I started a small mountain biking YouTube channel that I update when I can. I also participated in the 2021 Horrible Hundred and it was exactly as horrible as you might imagine.\n\n\nSpeedsolving\nWhen someone sees you with a Rubik’s cube and asks if you can solve it, they almost never expect to be told, “Give me 15 seconds” and then presented with a solved cube. I have a relatively small collection of puzzles and enjoy the zen mindset that can be found from practicing. I’m rather pleased with my competition results and have some of my solves on camera on a YouTube channel. I’m hoping to get out to competitions a bit more so I can update everyone with all the progress I’ve made. Within the community, I served on the WCA Communications Committee for a brief period, have helped staff a variety of competitions, and even organized my own competition in my hometown called Framingham Frozen Fingers."
  },
  {
    "objectID": "about.html#recommendations-from-friends",
    "href": "about.html#recommendations-from-friends",
    "title": "About Me",
    "section": "Recommendations from Friends",
    "text": "Recommendations from Friends\n\n\n“Gus is one of the most dependable and consistent people I have ever known.” – Melia R\n\n\n“You can always rely on Gus to burn his food” – Izzy Z\n\n\n“This is a guy that knows the guy you need for whatever it is you need” – Tucker M-S\n\n\n“Lemme think about it” – Macy L\n\n\n“Gus Lipkin, in the many the years I’ve known him, has enough resourcefulness and preparation skills in him to do the work of a dozen people” – Chris H"
  },
  {
    "objectID": "presentations/cat_simulator_2019.html",
    "href": "presentations/cat_simulator_2019.html",
    "title": "Cat Simulator 2019",
    "section": "",
    "text": "{% pdf “/assets/cat_simulator_2019.pdf” %}"
  },
  {
    "objectID": "presentations/trader_joes_cultural_marketing_plan.html",
    "href": "presentations/trader_joes_cultural_marketing_plan.html",
    "title": "Trader Joe’s Cultural and Marketing Plan",
    "section": "",
    "text": "{% pdf “/assets/trader_joes_cultural_marketing_plan.pdf” %}"
  },
  {
    "objectID": "presentations/spreadsheet_guide.html",
    "href": "presentations/spreadsheet_guide.html",
    "title": "Gus’ Good Spreadsheet Guide",
    "section": "",
    "text": "{% pdf “/assets/SpreadsheetGuide.pdf” %}"
  },
  {
    "objectID": "presentations/tutoring_at_poly.html",
    "href": "presentations/tutoring_at_poly.html",
    "title": "Improving Tutoring at Florida Poly",
    "section": "",
    "text": "{% pdf “/assets/tutoring_at_poly.pdf” %}"
  },
  {
    "objectID": "presentations/disney_world_ride_wait_times.html",
    "href": "presentations/disney_world_ride_wait_times.html",
    "title": "Disney World ride wait times",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: <a href=\"../assets/Data_Science_Final_Presentation.pdf\">Download PDF</a>"
  },
  {
    "objectID": "presentations/covid_time_series_gis.html",
    "href": "presentations/covid_time_series_gis.html",
    "title": "Investigating a relationship between climate variables and the spread of COVID-19",
    "section": "",
    "text": "{% pdf “/assets/covid_time_series_gis.pdf” %}"
  },
  {
    "objectID": "assets/post-assets/2022-02-23-making-pretty-excel-files-in-r/openxlsx.html",
    "href": "assets/post-assets/2022-02-23-making-pretty-excel-files-in-r/openxlsx.html",
    "title": "Using openxlsx in R",
    "section": "",
    "text": "# reading the file straight in only pulls the first sheet\nbbq <- read.xlsx(\"bbq.xlsx\")\nhead(bbq)\n\n               Name RSVPed    Status FoodPreference\n1       Masud Durga  FALSE      <NA>           <NA>\n2  Stanislav Zillah   TRUE       Yes         Hotdog\n3 Joaquina Aristide   TRUE       Yes      Hamburger\n4     Iuppiter Dieu  FALSE      <NA>           <NA>\n5     Hari Evgenios   TRUE Tentative         Hotdog\n6  Shaina Gwenaelle  FALSE      <NA>           <NA>\n\n\n\n# get the sheet names\nbbq <- loadWorkbook(\"bbq.xlsx\")\nbbq\n\nA Workbook object.\n \nWorksheets:\n Sheet 1: \"Attendance\"\n \n    Custom row heights (row: height)\n     1: 19 \n    Custom column widths (column: width)\n      1: 17.12, 2: 7.954, 3: 8.122, 4: 15.29, 5: 15.95 \n \n\n Sheet 2: \"Supplies\"\n \n    Custom row heights (row: height)\n     1: 19 \n    Custom column widths (column: width)\n      1: 13.95, 2: 9.29, 3: 11.62, 4: 17.29, 5: 8.622 \n \n\n \n Worksheet write order: 1, 2\n Active Sheet 2: \"Supplies\" \n    Position: 2\n\n# load the sheets and preview them\nattendance <- readWorkbook(bbq, \"Attendance\")\nhead(attendance)\n\n               Name RSVPed    Status FoodPreference\n1       Masud Durga  FALSE      <NA>           <NA>\n2  Stanislav Zillah   TRUE       Yes         Hotdog\n3 Joaquina Aristide   TRUE       Yes      Hamburger\n4     Iuppiter Dieu  FALSE      <NA>           <NA>\n5     Hari Evgenios   TRUE Tentative         Hotdog\n6  Shaina Gwenaelle  FALSE      <NA>           <NA>\n\nsupplies <- readWorkbook(bbq, sheet = \"Supplies\")\nhead(supplies)\n\n      SupplyType Quantity PerPackage PackagesNeeded Leftover\n1        Hotdogs       32         10              4        8\n2    Hotdog buns       NA          8              4        0\n3     Hamburgers       37          6              7        5\n4 Hamburger buns       NA          8              5        3\n\n\n\n# getStyles and set them appropriately\nstyles <- getStyles(bbq)\nstyles\n\n[[1]]\nA custom cell style. \n\n Cell formatting: GENERAL \n Font name: Calibri \n Font size: 14 \n Font colour: 1 \n Font decoration: BOLD \n \n\n\n[[2]]\nA custom cell style. \n\n Cell formatting: GENERAL \n Cell horz. align: center \n \n\n\n[[3]]\nA custom cell style. \n\n Cell formatting: GENERAL \n \n\n\n[[4]]\nA custom cell style. \n\n Cell formatting: GENERAL \n Font name: Calibri \n Font size: 12 \n Font colour: 1 \n Font decoration: BOLD \n \n\n\n[[5]]\nA custom cell style. \n\n Cell formatting: GENERAL \n Font name: Calibri \n Font size: 14 \n Font colour: 1 \n Font decoration: BOLD \n \n\n\n[[6]]\nA custom cell style. \n\n Cell formatting: GENERAL \n Cell horz. align: center \n \n\n\n[[7]]\nA custom cell style. \n\n Cell formatting: GENERAL \n Cell horz. align: center \n Cell vert. align: center \n \n\n# doesn't work for colors because those are conditional formatting\nheaderStyle <- styles[[1]]\nnumberStyle <- styles[[7]]\n\n\n# create workbook and check contents\nwb <- createWorkbook()\nwb\n\nA Workbook object.\n \nWorksheets:\n No worksheets attached\n\n\n\n# create the supplies sheet and check for it\naddWorksheet(wb = wb, sheetName = \"Supplies\")\n\n# write supplies to the worksheet using headerStyle\nwriteData(wb = wb, sheet = \"Supplies\", x = supplies, headerStyle = headerStyle)\n\n\n# add numberStyle\naddStyle(wb = wb, sheet = \"Supplies\", style = numberStyle, rows = 2:5, \n         cols = 2:5, gridExpand = TRUE)\n\n\n# merge the hamburger and hotdog quantity cells\nmergeCells(wb = wb, sheet = \"Supplies\", cols = 2, rows = 2:3)\nmergeCells(wb = wb, sheet = \"Supplies\", cols = 2, rows = 4:5)\n\n\n# set column widths to auto\nsetColWidths(wb = wb, sheet = \"Supplies\", cols = 1:5, widths = \"auto\")\n\n\n# create the attendance sheet and check for it\naddWorksheet(wb = wb, sheetName = \"Attendance\")\n\n# write attendance to the worksheet using the same headerStyle from before\nwriteData(wb = wb, sheet = \"Attendance\", x = attendance, \n          headerStyle = headerStyle)\n\n\n# create color styles for rsvp and status\ngoodStyle <- createStyle(fontColour = \"#006100\", bgFill = \"#C6EFCE\")\nbadStyle <- createStyle(fontColour = \"#9C0006\", bgFill = \"#FFC7CE\")\n# create center style for rsvp column\ncenterStyle <- createStyle(halign = \"center\")\n\n# create a variable of row numbers\nrowNumbers <- seq(2, nrow(attendance) + 1, by = 1)\n\n\n# center the column values\naddStyle(wb = wb, sheet = \"Attendance\", style = centerStyle, cols = 2, \n         rows = rowNumbers)\n\n# IF `RSVPed` is TRUE, set it to green. IF FALSE, set it to red\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 2, \n                      rows = rowNumbers, rule = \"B2==TRUE\", style = goodStyle)\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 2, \n                      rows = rowNumbers, rule = \"B2==FALSE\", style = badStyle)\n\n\n# add style for status and tentative\nmaybeStyle <- createStyle(fontColour = \"#9C6500\", bgFill = \"#FFEB9C\")\n\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 3, \n                      rows = rowNumbers, rule = \"C2==\\\"Yes\\\"\", \n                      style = goodStyle)\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 3, \n                      rows = rowNumbers, rule = \"C2==\\\"No\\\"\", \n                      style = badStyle)\nconditionalFormatting(wb = wb, sheet = \"Attendance\", cols = 3, \n                      rows = rowNumbers, rule = \"C2==\\\"Tentative\\\"\", \n                      style = maybeStyle)\n\n# set column widths to auto\nsetColWidths(wb = wb, sheet = \"Attendance\", cols = 1:4, widths = \"auto\")\n\n\n# check the workbook sheet order\nwb\n\nA Workbook object.\n \nWorksheets:\n Sheet 1: \"Supplies\"\n \n    Custom column widths (column: width)\n      1: auto, 2: auto, 3: auto, 4: auto, 5: auto \n \n\n Sheet 2: \"Attendance\"\n \n    Custom column widths (column: width)\n      1: auto, 2: auto, 3: auto, 4: auto \n \n\n \n Worksheet write order: 1, 2\n Active Sheet 1: \"Supplies\" \n    Position: 1\n\n# change the order\nworksheetOrder(wb) <- c(2, 1)\n\n# save the workbook\nsaveWorkbook(wb, \"newBBQ.xlsx\")"
  },
  {
    "objectID": "assets/post-assets/2022-02-16-grouped-and-stacked-bar-charts-in-r/StackAndDodge.html",
    "href": "assets/post-assets/2022-02-16-grouped-and-stacked-bar-charts-in-r/StackAndDodge.html",
    "title": "Grouped and Stacked Bar Charts in R",
    "section": "",
    "text": "ggplot(data) +\n  geom_bar(aes(x = specie,  y = value, fill = condition),\n           position = \"dodge\", stat = \"identity\")\n\n\n\n\n\nggplot(data) +\n  geom_bar(aes(x = specie,  y = value, fill = continent),\n           position = \"stack\", stat = \"identity\")\n\n\n\n\n\none <- ggplot(data) +\n  geom_bar(aes(x = specie, y = value, fill = condition), \n           position = \"dodge\", stat = \"identity\")\ntwo <- ggplot(data) +\n  geom_bar(aes(x = specie, y = value, fill = continent), \n           position = \"stack\", stat = \"identity\")\ngridExtra::grid.arrange(one, two, nrow = 2)\n\n\n\n\n\nggplot(data) +\n  geom_bar(aes(x = specie,  y = value, group = condition, fill = continent),\n           position = \"dodge\", stat = \"identity\") +\n  coord_flip()\n\n\n\n\n\nggplot(data) +\n  geom_bar(aes(x = interaction(specie, condition), y = value, fill = continent),\n           position = \"stack\", stat = \"identity\") +\n  coord_flip()\n\n\n\n\n\nggplot(data) +\n  geom_bar(aes(x = condition, y = value, fill = continent), \n           position = \"stack\", stat = \"identity\") +\n  facet_wrap( ~ specie)\n\n\n\n\n\nggplot(data) +\n  geom_bar(aes(x = condition, y = value, fill = continent),\n           position = \"stack\",\n           stat = \"identity\") +\n  facet_grid( ~specie)\n\n\n\n\n\nggplot(data) +\n  geom_bar(aes(x = condition, y = value, fill = continent),\n           position = \"stack\",\n           stat = \"identity\") +\n  facet_grid(~ specie, switch = \"x\") +\n  theme(strip.placement = \"outside\",\n        strip.background = element_rect(fill = NA, color = \"white\"),\n        panel.spacing = unit(-.01,\"cm\"))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi There 👋",
    "section": "",
    "text": "I’m Gus, a Business Analyst with a few years’ experience. I’d like to show you what I do.\nYou can also find me on Twitter @guslipkin or on Medium also @guslipkin."
  },
  {
    "objectID": "index.html#data-focused-projects",
    "href": "index.html#data-focused-projects",
    "title": "Hi There 👋",
    "section": "Data Focused Projects",
    "text": "Data Focused Projects"
  },
  {
    "objectID": "index.html#economic-analysis-focused-projects",
    "href": "index.html#economic-analysis-focused-projects",
    "title": "Hi There 👋",
    "section": "Economic Analysis Focused Projects",
    "text": "Economic Analysis Focused Projects"
  },
  {
    "objectID": "index.html#software-development",
    "href": "index.html#software-development",
    "title": "Hi There 👋",
    "section": "Software Development",
    "text": "Software Development"
  },
  {
    "objectID": "index.html#other-projects",
    "href": "index.html#other-projects",
    "title": "Hi There 👋",
    "section": "Other Projects",
    "text": "Other Projects"
  },
  {
    "objectID": "index.html#consulting",
    "href": "index.html#consulting",
    "title": "Hi There 👋",
    "section": "Consulting",
    "text": "Consulting"
  }
]