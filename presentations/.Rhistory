rpart.plot(regularTree$finalModel)
regularTreePred <- predict(regularTree, test)
regularTree <- tree(salePrice ~ ., train)
summary(regularTree)
plot(regularTree)
text(regularTree, pretty = 0)
control <- trainControl(method = "cv", number = 10)
bag <- randomForest(salePrice ~ ., data = train, mtry = 12)
bag
bag <- randomForest(salePrice ~ ., data = train)
bag
bag <- randomForest(salePrice ~ ., data = train, mtry = 8)
bag
bag <- randomForest(salePrice ~ ., data = train, mtry = 8)
bag
yHatBag <- predict(bag, test)
plot(yHatBag, test$salePrice)
abline(0, 1)
mean(yHatBag - test$salePrice)^2
yHatRegular <- tree(salePrice ~ ., train)
summary(yHatRegular)
plot(yHatRegular)
abline(0, 1)
text(regularTree, pretty = 0)
mean(yHatRegular - test$salePrice)^2
yHatRegular <- predict(regularTree, test)
summary(yHatRegular)
plot(yHatRegular)
plot(test$salePrice, yHatRegular)
regularTree <- tree(salePrice ~ ., train)
yHatRegular <- predict(regularTree, test)
summary(yHatRegular)
plot(yHatRegular, test$salePrice)
abline(0, 1)
text(regularTree, pretty = 0)
mean(yHatRegular - test$salePrice)^2
bag <- randomForest(salePrice ~ ., data = train, mtry = 8)
bag
yHatBag <- predict(bag, test)
plot(yHatBag, test$salePrice)
abline(0, 1)
mean(yHatBag - test$salePrice)^2
regularTree <- tree(salePrice ~ ., train)
yHatRegular <- predict(regularTree, test)
summary(yHatRegular)
plot(yHatRegular, test$salePrice)
abline(0, 1)
text(regularTree, pretty = 0)
mean(yHatRegular - test$salePrice)^2
rpartTree <- train(salePrice ~ ., train, method = "rpart")
rpart.plot(rpartTree$finalModel)
yHatRpart <- predict(rpartTree, test)
summary(yHatRpart)
plot(yHatRpart, test$salePrice)
abline(0, 1)
mean(yHatRpart - test$salePrice)^2
rf <- randomForest(salePrice ~ ., train, mtry = 8, importance = TRUE)
rf
rf <- randomForest(salePrice ~ ., train, mtry = 8, importance = TRUE)
rf
yHatRf <- predict(bag, test)
plot(yHatRf, test$salePrice)
abline(0, 1)
mean(yHatRf - test$salePrice)^2
rf <- randomForest(salePrice ~ ., train, mtry = 8, importance = TRUE)
rf
yHatRf <- predict(bag, test)
plot(yHatRf, test$salePrice)
abline(0, 1)
mean(yHatRf - test$salePrice)^2
importance(rf)
varImpPlot(rf)
tunegrid <- expand.grid(mtry = c(13))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
tunegrid <- expand.grid(mtry = c(8))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
yHatBag2 <- predict(bag2$finalModel, test)
library(data.table)
library(caret)
library(rpart.plot)
library(tree)
library(randomForest)
dt <- fread("APPENC07_Age.txt", col.names = c("salePrice", "sqFt", "bedrooms", "bathrooms", "ac", "cars", "pool", "quality", "style", "lotSize", "highway", "unknown"))
intToBool <- function(x) {
ifelse(x == 1, TRUE, FALSE)
}
dt$ac <- sapply(dt$ac, intToBool)
dt$pool <- sapply(dt$pool, intToBool)
dt$bedrooms <- as.factor(dt$bedrooms)
dt$bathrooms <- as.factor(dt$bathrooms)
dt$cars <- as.factor(dt$cars)
dt$quality <- as.factor(dt$quality)
dt$style <- as.factor(dt$style)
dt$highway <- as.factor(dt$highway)
head(dt)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
control <- trainControl(method = "cv", number = 10)
rpartTree <- train(salePrice ~ ., train, method = "rpart")
rpart.plot(rpartTree$finalModel)
yHatRpart <- predict(rpartTree, test)
summary(yHatRpart)
plot(yHatRpart, test$salePrice)
abline(0, 1)
mean(yHatRpart - test$salePrice)^2
regularTree <- tree(salePrice ~ ., train)
yHatRegular <- predict(regularTree, test)
summary(yHatRegular)
plot(yHatRegular, test$salePrice)
abline(0, 1)
text(regularTree, pretty = 0)
mean(yHatRegular - test$salePrice)^2
bag <- randomForest(salePrice ~ ., data = train, mtry = 8)
bag
yHatBag <- predict(bag, test)
plot(yHatBag, test$salePrice)
abline(0, 1)
mean(yHatBag - test$salePrice)^2
rf <- randomForest(salePrice ~ ., train, mtry = 8, importance = TRUE)
rf
yHatRf <- predict(bag, test)
plot(yHatRf, test$salePrice)
abline(0, 1)
mean(yHatRf - test$salePrice)^2
importance(rf)
varImpPlot(rf)
tunegrid <- expand.grid(mtry = c(6))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
yHatBag2 <- predict(bag2$finalModel, test)
library(data.table)
library(caret)
library(rpart.plot)
library(tree)
library(randomForest)
dt <- fread("APPENC07_Age.txt", col.names = c("salePrice", "sqFt", "bedrooms", "bathrooms", "ac", "cars", "pool", "quality", "style", "lotSize", "highway", "unknown"))
intToBool <- function(x) {
ifelse(x == 1, TRUE, FALSE)
}
dt$ac <- sapply(dt$ac, intToBool)
dt$pool <- sapply(dt$pool, intToBool)
dt$bedrooms <- as.factor(dt$bedrooms)
dt$bathrooms <- as.factor(dt$bathrooms)
dt$cars <- as.factor(dt$cars)
dt$quality <- as.factor(dt$quality)
dt$style <- as.factor(dt$style)
dt$highway <- as.factor(dt$highway)
head(dt)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
control <- trainControl(method = "cv", number = 10)
tunegrid <- expand.grid(mtry = c(6))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
yHatBag2 <- predict(bag2$finalModel, test)
bag2
mean((yHatBag2 - test$salePrice)^2)
bag2
bag2$finalModel$mse
mean(bag2$finalModel$mse)
bag2$finalModel$mse
library(gbm)
boost <- gbm(salePrice ~ ., train, distribution = "gaussian", n.trees = 5000, interaction.depth = 4)
dt$ac <- as.factor(dt$ac)
dt$pool <- as.factor(dt$pool)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
boost <- gbm(salePrice ~ ., train, distribution = "gaussian", n.trees = 5000, interaction.depth = 4)
summary(boost)
plot(boost, i = "rm")
boost <- gbm(salePrice ~ ., train, distribution = "gaussian", n.trees = 5000, interaction.depth = 4)
summary(boost)
plot(boost, i = "rm")
plot(boost, i = "lstat")
summary(boost)
dt$ac <- as.factor(dt$ac)
dt$pool <- as.factor(dt$pool)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
boost <- gbm(salePrice ~ ., train, distribution = "gaussian", n.trees = 5000, interaction.depth = 4)
summary(boost)
plot(boost, i = "quality")
plot(boost, i = "sqFt")
yHatBoost <- predict(boost, test, n.trees = 5000)
plot(yHatBoost, test$salePrice)
abline(0, 1)
mean((yHatBoost - test$salePrice)^2)
sqrt(mean((yHatBoost - test$salePrice)^2))
dt$ac <- as.factor(dt$ac)
dt$pool <- as.factor(dt$pool)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
boost <- gbm(salePrice ~ ., train, distribution = "gaussian", n.trees = 5000, interaction.depth = 4)
summary(boost)
plot(boost, i = "quality")
plot(boost, i = "sqFt")
yHatBoost <- predict(boost, test, n.trees = 5000)
plot(yHatBoost, test$salePrice)
abline(0, 1)
mean((yHatBoost - test$salePrice)^2)
tunegrid <- expand.grid(mtry = c(6))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
yHatBag2 <- predict(bag2$finalModel, test)
library(data.table)
library(caret)
library(rpart.plot)
library(tree)
library(randomForest)
library(gbm)
dt <- fread("APPENC07_Age.txt", col.names = c("salePrice", "sqFt", "bedrooms", "bathrooms", "ac", "cars", "pool", "quality", "style", "lotSize", "highway", "unknown"))
intToBool <- function(x) {
ifelse(x == 1, TRUE, FALSE)
}
dt$ac <- sapply(dt$ac, intToBool)
dt$pool <- sapply(dt$pool, intToBool)
dt$bedrooms <- as.factor(dt$bedrooms)
dt$bathrooms <- as.factor(dt$bathrooms)
dt$cars <- as.factor(dt$cars)
dt$quality <- as.factor(dt$quality)
dt$style <- as.factor(dt$style)
dt$highway <- as.factor(dt$highway)
head(dt)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
control <- trainControl(method = "cv", number = 10)
rpartTree <- train(salePrice ~ ., train, method = "rpart")
rpart.plot(rpartTree$finalModel)
yHatRpart <- predict(rpartTree, test)
summary(yHatRpart)
plot(yHatRpart, test$salePrice)
abline(0, 1)
mean(yHatRpart - test$salePrice)^2
regularTree <- tree(salePrice ~ ., train)
yHatRegular <- predict(regularTree, test)
summary(yHatRegular)
plot(yHatRegular, test$salePrice)
abline(0, 1)
text(regularTree, pretty = 0)
mean(yHatRegular - test$salePrice)^2
bag <- randomForest(salePrice ~ ., data = train, mtry = 8)
bag
yHatBag <- predict(bag, test)
plot(yHatBag, test$salePrice)
abline(0, 1)
mean(yHatBag - test$salePrice)^2
rf <- randomForest(salePrice ~ ., train, mtry = 8, importance = TRUE)
rf
yHatRf <- predict(bag, test)
plot(yHatRf, test$salePrice)
abline(0, 1)
mean(yHatRf - test$salePrice)^2
importance(rf)
varImpPlot(rf)
tunegrid <- expand.grid(mtry = c(8))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
yHatBag2 <- predict(bag2$finalModel, test)
bag2
test
yHatBag2 <- predict(bag2$finalModel, test$salePrice)
yHatBag2 <- predict(bag2$finalModel, test)
test
yHatBag2 <- predict(bag2$finalModel, test[, -1])
bag2
yHatBag2 <- predict(bag2$finalModel, test)
test
train
dt$ac <- as.factor(dt$ac)
dt$pool <- as.factor(dt$pool)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
boost <- gbm(salePrice ~ ., train, distribution = "gaussian", n.trees = 5000, interaction.depth = 4)
summary(boost)
plot(boost, i = "quality")
plot(boost, i = "sqFt")
yHatBoost <- predict(boost, test, n.trees = 5000)
plot(yHatBoost, test$salePrice)
abline(0, 1)
mean((yHatBoost - test$salePrice)^2)
dt <- fread("APPENC07_Age.txt", col.names = c("salePrice", "sqFt", "bedrooms", "bathrooms", "ac", "cars", "pool", "quality", "style", "lotSize", "highway", "houseAge"))
intToBool <- function(x) {
ifelse(x == 1, TRUE, FALSE)
}
dt$ac <- sapply(dt$ac, intToBool)
dt$pool <- sapply(dt$pool, intToBool)
dt$bedrooms <- as.factor(dt$bedrooms)
dt$bathrooms <- as.factor(dt$bathrooms)
dt$cars <- as.factor(dt$cars)
dt$quality <- as.factor(dt$quality)
dt$style <- as.factor(dt$style)
dt$highway <- as.factor(dt$highway)
head(dt)
library(data.table)
library(caret)
library(rpart.plot)
library(tree)
library(randomForest)
library(gbm)
dt <- fread("APPENC07_Age.txt", col.names = c("salePrice", "sqFt", "bedrooms", "bathrooms", "ac", "cars", "pool", "quality", "style", "lotSize", "highway", "houseAge"))
intToBool <- function(x) {
ifelse(x == 1, TRUE, FALSE)
}
dt$ac <- sapply(dt$ac, intToBool)
dt$pool <- sapply(dt$pool, intToBool)
dt$bedrooms <- as.factor(dt$bedrooms)
dt$bathrooms <- as.factor(dt$bathrooms)
dt$cars <- as.factor(dt$cars)
dt$quality <- as.factor(dt$quality)
dt$style <- as.factor(dt$style)
dt$highway <- as.factor(dt$highway)
head(dt)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
control <- trainControl(method = "cv", number = 10)
rpartTree <- train(salePrice ~ ., train, method = "rpart")
rpart.plot(rpartTree$finalModel)
yHatRpart <- predict(rpartTree, test)
summary(yHatRpart)
plot(yHatRpart, test$salePrice)
abline(0, 1)
mean(yHatRpart - test$salePrice)^2
regularTree <- tree(salePrice ~ ., train)
yHatRegular <- predict(regularTree, test)
summary(yHatRegular)
plot(yHatRegular, test$salePrice)
abline(0, 1)
text(regularTree, pretty = 0)
mean(yHatRegular - test$salePrice)^2
bag <- randomForest(salePrice ~ ., data = train, mtry = 8)
bag
yHatBag <- predict(bag, test)
plot(yHatBag, test$salePrice)
abline(0, 1)
mean(yHatBag - test$salePrice)^2
rf <- randomForest(salePrice ~ ., train, mtry = 8, importance = TRUE)
rf
yHatRf <- predict(bag, test)
plot(yHatRf, test$salePrice)
abline(0, 1)
mean(yHatRf - test$salePrice)^2
importance(rf)
varImpPlot(rf)
tunegrid <- expand.grid(mtry = c(8))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
yHatBag2 <- predict(bag2$finalModel, test)
yHatBag2 <- predict(bag2$finalModel, newdata = test)
library(data.table)
library(caret)
library(rpart.plot)
library(tree)
library(randomForest)
library(gbm)
dt <- fread("APPENC07_Age.txt", col.names = c("salePrice", "sqFt", "bedrooms", "bathrooms", "ac", "cars", "pool", "quality", "style", "lotSize", "highway", "houseAge"))
intToBool <- function(x) {
ifelse(x == 1, TRUE, FALSE)
}
dt$ac <- sapply(dt$ac, intToBool)
dt$pool <- sapply(dt$pool, intToBool)
dt$bedrooms <- as.factor(dt$bedrooms)
dt$bathrooms <- as.factor(dt$bathrooms)
dt$cars <- as.factor(dt$cars)
dt$quality <- as.factor(dt$quality)
dt$style <- as.factor(dt$style)
dt$highway <- as.factor(dt$highway)
head(dt)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
control <- trainControl(method = "cv", number = 10)
rpartTree <- train(salePrice ~ ., train, method = "rpart")
rpart.plot(rpartTree$finalModel)
yHatRpart <- predict(rpartTree, test)
summary(yHatRpart)
plot(yHatRpart, test$salePrice)
abline(0, 1)
mean(yHatRpart - test$salePrice)^2
regularTree <- tree(salePrice ~ ., train)
yHatRegular <- predict(regularTree, test)
summary(yHatRegular)
plot(yHatRegular, test$salePrice)
abline(0, 1)
text(regularTree, pretty = 0)
mean(yHatRegular - test$salePrice)^2
bag <- randomForest(salePrice ~ ., data = train, mtry = 8)
bag
yHatBag <- predict(bag, test)
plot(yHatBag, test$salePrice)
abline(0, 1)
mean(yHatBag - test$salePrice)^2
rf <- randomForest(salePrice ~ ., train, mtry = 8, importance = TRUE)
rf
yHatRf <- predict(bag, test)
plot(yHatRf, test$salePrice)
abline(0, 1)
mean(yHatRf - test$salePrice)^2
importance(rf)
varImpPlot(rf)
dt$ac <- as.factor(dt$ac)
dt$pool <- as.factor(dt$pool)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
boost <- gbm(salePrice ~ ., train, distribution = "gaussian", n.trees = 5000, interaction.depth = 4)
summary(boost)
plot(boost, i = "quality")
plot(boost, i = "sqFt")
yHatBoost <- predict(boost, test, n.trees = 5000)
plot(yHatBoost, test$salePrice)
abline(0, 1)
mean((yHatBoost - test$salePrice)^2)
mean(yHatBag2 - test$salePrice)^2
mean((yHatBoost - test$salePrice)^2)
mean(yHatBoost - test$salePrice)^2
library(data.table)
library(caret)
library(rpart.plot)
library(tree)
library(randomForest)
library(gbm)
dt <- fread("APPENC07_Age.txt", col.names = c("salePrice", "sqFt", "bedrooms", "bathrooms", "ac", "cars", "pool", "quality", "style", "lotSize", "highway", "houseAge"))
intToBool <- function(x) {
ifelse(x == 1, TRUE, FALSE)
}
dt$ac <- sapply(dt$ac, intToBool)
dt$pool <- sapply(dt$pool, intToBool)
dt$bedrooms <- as.factor(dt$bedrooms)
dt$bathrooms <- as.factor(dt$bathrooms)
dt$cars <- as.factor(dt$cars)
dt$quality <- as.factor(dt$quality)
dt$style <- as.factor(dt$style)
dt$highway <- as.factor(dt$highway)
head(dt)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
control <- trainControl(method = "cv", number = 10)
rpartTree <- train(salePrice ~ ., train, method = "rpart")
rpart.plot(rpartTree$finalModel)
yHatRpart <- predict(rpartTree, test)
summary(yHatRpart)
plot(yHatRpart, test$salePrice)
abline(0, 1)
mseRpart <- mean(yHatRpart - test$salePrice)^2
regularTree <- tree(salePrice ~ ., train)
yHatRegular <- predict(regularTree, test)
summary(yHatRegular)
plot(yHatRegular, test$salePrice)
abline(0, 1)
text(regularTree, pretty = 0)
mseTree <- mean(yHatRegular - test$salePrice)^2
bag <- randomForest(salePrice ~ ., data = train, mtry = 8)
bag
yHatBag <- predict(bag, test)
plot(yHatBag, test$salePrice)
abline(0, 1)
mseBagging <- mean(yHatBag - test$salePrice)^2
rf <- randomForest(salePrice ~ ., train, mtry = 8, importance = TRUE)
rf
yHatRf <- predict(bag, test)
plot(yHatRf, test$salePrice)
abline(0, 1)
mseRf <- mean(yHatRf - test$salePrice)^2
importance(rf)
varImpPlot(rf)
tunegrid <- expand.grid(mtry = c(8))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
yHatBag2 <- predict(bag2$finalModel, newdata = test)
dt$ac <- as.factor(dt$ac)
dt$pool <- as.factor(dt$pool)
set.seed(2022)
rowPicker <- createDataPartition(y=dt$salePrice, p=0.8, list=FALSE)
train <- dt[rowPicker]
test <- dt[-rowPicker]
boost <- gbm(salePrice ~ ., train, distribution = "gaussian", n.trees = 5000, interaction.depth = 4)
summary(boost)
plot(boost, i = "quality")
plot(boost, i = "sqFt")
yHatBoost <- predict(boost, test, n.trees = 5000)
plot(yHatBoost, test$salePrice)
abline(0, 1)
mseBoost <- mean(yHatBoost - test$salePrice)^2
c(mseBagging, mseBoost, mseRf, mseTree)
yHatRpart
c("Bagging" = mseBagging,
"Boosting" = mseBoost,
"Random Forest" = mseRf,
"RPart Tree" = mseRpart
"Tree" = mseTree)
c("Bagging" = mseBagging,
"Boosting" = mseBoost,
"Random Forest" = mseRf,
"RPart Tree" = mseRpart,
"Tree" = mseTree)
tunegrid <- expand.grid(mtry = c(4))
bag2 <- train(salePrice ~ ., train, tuneGrid = tunegrid, method = "rf", importance = TRUE)
yHatBag2 <- predict(bag2$finalModel, newdata = test)
