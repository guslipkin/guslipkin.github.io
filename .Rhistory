tbl_athlete_bio_vw <- sdf_sql(sc, glue("{tbl_athlete_bio_qry}"))
reticulate::repl_python()
tbl_athlete_results_qry <-
'SELECT athlete_id
FROM athlete_results
WHERE medal != "na"'
sdf_sql(sc,
glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')) |>
head()
reticulate::repl_python()
tmp <- glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
tbl_athlete_results_qry <-
'SELECT athlete_id
FROM athlete_results
tbl_athlete_results_qry <-
'SELECT athlete_id
tbl_athlete_results_qry <-
'SELECT athlete_id
FROM athlete_results
WHERE medal != "na"'
tmp <- glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
tmp
sdf_sql(sc, glue('SELECT *, COUNT(country)
FROM {tmp}
GROUP BY country'))
sdf_sql(sc, glue('SELECT *, COUNT(country)
FROM ({tmp})
GROUP BY country'))
sdf_sql(sc, glue('SELECT *, COUNT(*)
FROM ({tmp})
GROUP BY country'))
sdf_sql(sc, glue('SELECT COUNT(*)
FROM ({tmp})
GROUP BY country'))
sdf_sql(sc, glue('SELECT COUNT(country)
FROM ({tmp})
GROUP BY country'))
sdf_sql(sc, glue('SELECT country, COUNT(country)
FROM ({tmp})
GROUP BY country'))
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({tmp})
GROUP BY country
ORDER BY '))
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({tmp})
GROUP BY country
ORDER BY medal_count'))
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({tmp})
GROUP BY country
ORDER BY medal_count DESC'))
tbl_athlete_results_qry <-
'SELECT athlete_id
FROM athlete_results
WHERE medal != "na"'
tmp <- ('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({tmp})
GROUP BY country
ORDER BY medal_count DESC'))
tmp
glue('SELECT country, COUNT(country) AS medal_count
FROM ({tmp})
GROUP BY country
ORDER BY medal_count DESC')
glue(glue('SELECT country, COUNT(country) AS medal_count
FROM ({tmp})
GROUP BY country
ORDER BY medal_count DESC'))
tbl_athlete_results_qry <-
'SELECT athlete_id
FROM athlete_results
WHERE medal != "na"'
tmp <- glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({tmp})
GROUP BY country
ORDER BY medal_count DESC'))
tmp <- "hello"
print(glue("{str}"))
print(glue("{tmp}"))
medal_athlete_qry <-
glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
tbl_medal_athlete <-
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({medal_athlete_qry})
GROUP BY country
ORDER BY medal_count DESC'))
head(tbl_medal_athlete)
sdf_sql(sc, tbl_medal_athlete)
tbl_medal_athlete
tbl_medal_athlete <- spark_table_name("test")
tbl_medal_athlete
spark_table_name("test")
medal_athlete_qry <-
glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
tbl_medal_athlete <-
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({medal_athlete_qry})
GROUP BY country
ORDER BY medal_count DESC'))
spark_table_name(tbl_medal_athlete)
spark_table_name(tbl_medal_athlete) <- "test"
spark_table_name(tbl_medal_athlete <- "test") <- "test"
spark_table_name(tbl_medal_athlete <- "test")
tbl_medal_athlete
medal_athlete_qry <-
glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
tbl_medal_athlete <-
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({medal_athlete_qry})
GROUP BY country
ORDER BY medal_count DESC'))
head(tbl_medal_athlete)
spark_table_name(tbl_medal_athlete)
tbl_medal_athlete
spark_load_table(sc, "test", tbl_medal_athlete)
copy_to(sc, tbl_medal_athlete, "test")
tbl_medal_athlete
test
test
sdf_sql(sc, glue('CREATE TABLE {tbl_medal_athlete}'))
sdf_sql(sc, glue('{tbl_medal_athlete}'))
medal_athlete_qry <-
glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
tbl_medal_athlete <-
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({medal_athlete_qry})
GROUP BY country
ORDER BY medal_count DESC'))
head(tbl_medal_athlete)
sdf_sql(sc, glue('{tbl_medal_athlete}'))
glue('{tbl_medal_athlete}')
tbl_medal_athlete
sdf_sql(sc, glue('SELECT * FROM ({tbl_medal_athlete})'))
glue('SELECT * FROM ({tbl_medal_athlete})')
spark_disconnect(sc)
reticulate::repl_python()
#| message: false
library(sparklyr)
library(glue)
sc <- spark_connect(master = "local")
reticulate::repl_python()
tbl_athlete_bio <-
spark_read_csv(sc, name = "athlete_bio",
path = "/Users/guslipkin/Downloads/archive/Olympic_Athlete_Bio.csv")
tbl_athlete_results <-
spark_read_csv(sc, name = "athlete_results",
path = "/Users/guslipkin/Downloads/archive/Olympic_Athlete_Event_Results.csv")
tbl_results <-
spark_read_csv(sc, name = "results",
path = "/Users/guslipkin/Downloads/archive/Olympic_Athlete_Event_Results.csv")
tbl_medal_tally <-
spark_read_csv(sc, name = "medal_tally",
path = "/Users/guslipkin/Downloads/archive/Olympic_Games_Medal_Tally.csv")
tbl_games <-
spark_read_csv(sc, name = "games",
path = "/Users/guslipkin/Downloads/archive/Olympics_Games.csv")
tbl_country <-
spark_read_csv(sc, name = "country",
path = "/Users/guslipkin/Downloads/archive/Olympics_Country.csv")
reticulate::repl_python()
#| layout-ncol: 2
#| tbl-subcap:
#|   - "sparklyr"
#|   - "SQL"
# R
head(tbl_country)
# SQL
sdf_sql(sc, "SELECT * FROM country LIMIT 6")
reticulate::repl_python()
# R
tbl_athlete_bio_vw <-
tbl_athlete_bio |>
filter(height != "na", weight != "na") |>
mutate(born = as.Date(born),
height = as.double(height),
weight = as.double(weight)) |>
select(athlete_id, name, sex, born, height, weight, country, country_noc)
# SQL
tbl_athlete_bio_vw <-
sdf_sql(sc,
'SELECT
athlete_id, name, sex, CAST(born AS DATE), CAST(height AS DOUBLE),
CAST(weight AS DOUBLE), country, country_noc
FROM athlete_bio
WHERE
height != "na" AND
weight != "na"')
head(tbl_athlete_bio_vw)
reticulate::repl_python()
tmp <- "hello"
print(glue("{tmp}"))
tbl_athlete_bio_qry <-
'SELECT
athlete_id, name, sex, CAST(born AS DATE), CAST(height AS DOUBLE),
CAST(weight AS DOUBLE), country, country_noc
FROM athlete_bio
WHERE
height != "na" AND
weight != "na"'
tbl_athlete_bio_vw <- sdf_sql(sc, glue("{tbl_athlete_bio_qry}"))
head(tbl_athlete_bio_vw)
reticulate::repl_python()
tbl_athlete_results_qry <-
'SELECT athlete_id
FROM athlete_results
WHERE medal != "na"'
sdf_sql(sc,
glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')) |>
head()
reticulate::repl_python()
medal_athlete_qry <-
glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
tbl_medal_athlete <-
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({medal_athlete_qry})
GROUP BY country
ORDER BY medal_count DESC'))
head(tbl_medal_athlete)
reticulate::repl_python()
glue('SELECT * FROM ({tbl_medal_athlete})')
sdf_sql(sc, glue('SELECT * FROM ({medal_athlete_qry})'))
spark_table_name("test")
spark_table_name("look at me")
spark_table_name(tbl_medal_athlete)
tbl_medal_athlete
spark_table_name(substitute(tbl_medal_athlete))
medal_athlete_qry <-
glue('SELECT *
FROM ({tbl_athlete_bio_qry})
WHERE athlete_id IN ({tbl_athlete_results_qry})')
tbl_country_medal <-
sdf_sql(sc, glue('SELECT country, COUNT(country) AS medal_count
FROM ({medal_athlete_qry})
GROUP BY country
ORDER BY medal_count DESC'))
head(tbl_country_medal)
reticulate::repl_python()
bestC
library(data.table)
library(kernlab)
data <- as.matrix(fread("/Users/guslipkin/Library/Mobile Documents/com~apple~CloudDocs/ISYE 6501/Homework/Homework 1/hw1-SP22/data 2.2/credit_card_data-headers.txt"))
data[1:6,]
columnValues <- t(1:10)
cValues <- seq(.00138747, .0013875, by = .000000001)
cValues <- seq(100, 1000, by = 100)
bestC <- sapply(cValues, function(y) {
model <- ksvm(data[,1:10], data[,11], type = "C-svc", kernel = "vanilladot", C = y, scaled = TRUE)
a <- colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 <- -model@b
pred <- predict(model, data[,1:10])
sum(pred == data[,11]) / nrow(data)
})
columnValues <- t(1:10)
cValues <- seq(.00138747, .0013875, by = .000000001)
bestC <- sapply(cValues, function(y) {
model <- ksvm(data[,1:10], data[,11], type = "C-svc", kernel = "vanilladot", C = y, scaled = TRUE)
a <- colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 <- -model@b
pred <- predict(model, data[,1:10])
sum(pred == data[,11]) / nrow(data)
})
bestC <- cValues[which.max(bestC)]
model <- ksvm(data[,1:10], data[,11], type = "C-svc", kernel = "vanilladot", C = bestC, scaled = TRUE)
a <- colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 <- -model@b
pred <- predict(model, data[,1:10])
sum(pred == data[,11]) / nrow(data)
paste(round(a0, 4), "+", paste(round(a, 4), names(a), collapse = " + ", sep = "*"))
columnValues <- t(1:10)
cValues <- seq(.00138747, .0013875, by = .00000001)
bestC <- sapply(cValues, function(y) {
model <- ksvm(data[,1:10], data[,11], type = "C-svc", kernel = "vanilladot", C = y, scaled = TRUE)
a <- colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 <- -model@b
pred <- predict(model, data[,1:10])
sum(pred == data[,11]) / nrow(data)
})
bestC <- cValues[which.max(bestC)]
model <- ksvm(data[,1:10], data[,11], type = "C-svc", kernel = "vanilladot", C = bestC, scaled = TRUE)
a <- colSums(model@xmatrix[[1]] * model@coef[[1]])
a0 <- -model@b
pred <- predict(model, data[,1:10])
sum(pred == data[,11]) / nrow(data)
paste(round(a0, 4), "+", paste(round(a, 4), names(a), collapse = " + ", sep = "*"))
getwd()
cd Documents
cd /Documents
setwd("/Users/guslipkin/Documents/GitHub/guslipkin.github.io")
quarto::quarto_render()
quarto::quarto_render()
install.packages("devtools")
devtools::install_github("guslipkin/dewey")
devtools::install_github("guslipkin/dewey")
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
setwd("/Users/guslipkin/Documents/GitHub/guslipkin.github.io")
quarto::quarto_render()
quarto::quarto_render(cache_refresh = TRUE)
reticulate::repl_python()
#| message: false
library(sparklyr)
library(glue)
sc <- spark_connect(master = "local")
reticulate::repl_python()
tbl_athlete_bio <-
spark_read_csv(sc, name = "athlete_bio",
path = "../assets/data/Olympic_Athlete_Bio.csv")
tbl_athlete_results <-
spark_read_csv(sc, name = "athlete_results",
path = "../assets/data/Olympic_Athlete_Event_Results.csv")
tbl_results <-
spark_read_csv(sc, name = "results",
path = "../assets/data/Olympic_Athlete_Event_Results.csv")
tbl_medal_tally <-
spark_read_csv(sc, name = "medal_tally",
path = "../assets/data/Olympic_Games_Medal_Tally.csv")
tbl_games <-
spark_read_csv(sc, name = "games",
path = "../assets/data/Olympics_Games.csv")
tbl_country <-
spark_read_csv(sc, name = "country",
path = "../assets/data/Olympics_Country.csv")
reticulate::repl_python()
spark_disconnect(sc)
setwd("/Users/guslipkin/Documents/GitHub/guslipkin.github.io")
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_preview()
<center><img src="/assets/gus_headshot_new.jpg" style="max-width: 1%;"/></center>
data<-as.matrix (read.table("../Homework 1/hw1-SP22/data 2.2/credit_card_data-headers.txt" , header = TRUE))
library(kernlab)
library(kknn)
i <- 1:400
train <- as.data.frame(data[i,])
test <- as.data.frame(data[-i,])
knn_accuracy <- c()
ktest <- seq(from = 3, to = 20, by = 1)
for (k in ktest) {
knn_model <- kknn(R1~., train, test, k = k, scale=TRUE)
pred_kknn <- round(fitted(knn_model))
knn_accuracy <- c(knn_accuracy, sum(pred_kknn == test[, 11]) / nrow(test))
}
max(knn_accuracy)
ktest[which.max(knn_accuracy)]
library(tidyverse)
head(iris)
ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) +
geom_point()
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
geom_point()
iris_1<- select(iris, Sepal.Length, Sepal.Width, Petal.Width, Petal.Length)
head(iris_1)
fviz_nbclust(iris_1, kmeans, method = "wss")
quarto::quarto_preview()
quarto::quarto_render()
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_preview()
reticulate::conda_install("nbformat")
reticulate::py_install("nbformat")
quarto::quarto_preview()
reticulate::py_install("jupyter")
quarto::quarto_preview()
reticulate::py_install("jupyter")
quarto::quarto_preview()
install.packages("reticulate")
install.packages(c("brew", "cli", "crayon", "desc", "DT", "Exact", "FactoMineR", "foreign", "future.apply", "gargle", "gert", "gh", "gitcreds", "httpuv", "hunspell", "igraph", "jsonlite", "lifecycle", "Matrix", "MatrixModels", "nnet", "openssl", "ragg", "readr", "rlang", "scatterplot3d", "tidyr", "timeDate", "tinytex", "tokenizers", "vctrs", "visNetwork", "vroom", "webshot", "xfun", "zip"))
quarto::quarto_preview()
reticulate::py_eval("python3 -m pip install jupyter")
reticulate::py_eval("pip install jupyter")
reticulate::py_eval("%pip install jupyter")
reticulate::py_eval("python3 -m install jupyter")
reticulate::miniconda_update()
quarto::quarto_preview()
reticulate::py_install("jupyter-cache")
quarto::quarto_preview()
quarto::quarto_preview()
as.numeric("$555")
as.numeric("555,000")
stringr::str_remove_all("55,000.45", "[\\$\\.,]")
as.numeric(stringr::str_remove_all("55,000.45", "[\\$\\.,]"))
as.numeric(stringr::str_remove_all("55,000.45", "[,\\$]"))
as.integer(stringr::str_remove_all("55,000.45", "[,\\$]"))
quarto::quarto_render()
quarto::quarto_preview()
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render()
quarto::quarto_render(cache_refresh = TRUE)
#| code-line-numbers: true
head(mtcars)
head(mtcars)
#| code-line-numbers: true
library(tidyverse)
mtcars %>%
group_by(cyl)
mtcars %>%
group_by(cyl) %>%
summarise(mean(disp))
mtcars
mtcars %>%
group_by(cyl) %>%
summarise(disp = mean(disp),
mpg = mean(mgp))
mtcars %>%
group_by(cyl) %>%
summarise(disp = mean(disp),
mpg = mean(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(disp = mean(disp),
mpg = mean(mpg)) %>%
pivot_longer(cols = c(disp, mpg))
mtcars |>
group_by(cyl) |>
summarise(disp = mean(disp),
mpg = mean(mpg)) |>
ungroup() |>
pivot_longer(cols = c(disp, mpg))
mtcars |>
group_by(cyl) |>
summarise(disp = mean(disp),
mpg = mean(mpg)) |>
ungroup() |>
pivot_longer(cols = c(disp, mpg)) |>
ggplot() +
geom_bar(aes(x = cyl, y = value, fill = name))
mtcars |>
group_by(cyl) |>
summarise(disp = mean(disp),
mpg = mean(mpg)) |>
ungroup() |>
pivot_longer(cols = c(disp, mpg)) |>
ggplot() +
geom_bar(aes(x = cyl, y = value, fill = name), stat = "identity")
mtcars |>
group_by(cyl) |>
summarise(disp = mean(disp),
mpg = mean(mpg)) |>
ungroup() |>
pivot_longer(cols = c(disp, mpg)) |>
mutate(cyl = as.factor(cyl)) |>
ggplot() +
geom_bar(aes(x = cyl, y = value, fill = name), stat = "identity", position = "dodge")
#| fig-height: 5
library(tidyverse)
mtcars |>
group_by(cyl) |>
summarise(disp = mean(disp),
mpg = mean(mpg)) |>
ungroup() |>
pivot_longer(cols = c(disp, mpg)) |>
mutate(cyl = as.factor(cyl)) |>
ggplot() +
geom_bar(aes(x = cyl, y = value, fill = name), stat = "identity", position = "dodge")
#| fig-width: 4
#| fig-height: 3
library(tidyverse)
mtcars |>
group_by(cyl) |>
summarise(disp = mean(disp),
mpg = mean(mpg)) |>
ungroup() |>
pivot_longer(cols = c(disp, mpg)) |>
mutate(cyl = as.factor(cyl)) |>
ggplot() +
geom_bar(aes(x = cyl, y = value, fill = name), stat = "identity", position = "dodge")
#| echo: true
library(tidyverse)
mtcars |>
ggplot() +
geom_bar(aes(x = cyl, y = value, fill = name),
stat = "identity", position = "dodge")
quarto::quarto_render(cache_refresh = TRUE)
quarto::quarto_render(cache_refresh = TRUE)
