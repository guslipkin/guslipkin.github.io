[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gus Lipkin. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lipkin G (2022). dewey: R library variety things. R package version 0.1.4.","code":"@Manual{,   title = {dewey: An R library for a variety of things},   author = {Gus Lipkin},   year = {2022},   note = {R package version 0.1.4}, }"},{"path":"/index.html","id":"dewey-","dir":"","previous_headings":"","what":"An R library for a variety of things","title":"An R library for a variety of things","text":"R library variety things small collection functions may helpful STATA users regular human beings.","code":""},{"path":"/index.html","id":"install-process","dir":"","previous_headings":"","what":"Install Process","title":"An R library for a variety of things","text":"","code":"install.packages(\"devtools\") devtools::install_github(\"guslipkin/dewey\")"},{"path":"/index.html","id":"regsearch","dir":"","previous_headings":"","what":"regsearch","title":"An R library for a variety of things","text":"(data, dependent, independent, minvar = 1, maxvar, family, topN = 0, interactions = FALSE, multi = FALSE, ...) exhaustive search regression built base R","code":""},{"path":"/index.html","id":"ifelsedata","dir":"","previous_headings":"","what":"ifelsedata","title":"An R library for a variety of things","text":"(x, y, arg = NULL, matchCols = FALSE) Fast data.frame comparisons cell level","code":""},{"path":"/index.html","id":"difffill","dir":"","previous_headings":"","what":"diffFill","title":"An R library for a variety of things","text":"(x, lag = 1, differences = 1, ...) wrapper base diff function returns data.frame length input. Allows vector input lag differences.","code":""},{"path":"/index.html","id":"lagmultiple","dir":"","previous_headings":"","what":"lagMultiple","title":"An R library for a variety of things","text":"(x, k = 1) Appropriately lags input variable returns data.frame length input. Allows vector input k.","code":""},{"path":"/reference/diffFill.html","id":null,"dir":"Reference","previous_headings":"","what":"An extension on `diff` from base R that fills blank space with NA — diffFill","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"extension `diff` base R fills blank space NA","code":""},{"path":"/reference/diffFill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"diffFill(x, lag = 1, differences = 1, name = NULL, ...)"},{"path":"/reference/diffFill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"x numeric vector matrix containing values differenced lag (Optional) integer indicating lag use. `x` vector, `lag` can also vector. Defaults 1 differences (Optional) integer indicating order difference. `x` vector, `differences` can also vector. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed `x`. possible, `name` default \"X\". ... (Optional) arguments passed methods","code":""},{"path":"/reference/diffFill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"Returns vector length input, otherwise behaves   diff. input matrix, returns   matrix.","code":""},{"path":"/reference/diffFill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"# Creating dummy data x <- rnorm(10) # for 1 lag and 2 differences diffFill(x, 1, 2) #>        x_l1d2 #> 1          NA #> 2          NA #> 3  -1.3515008 #> 4  -1.0367352 #> 5   1.5267476 #> 6  -0.3316144 #> 7  -1.7117629 #> 8   2.4804369 #> 9  -1.2944980 #> 10  0.5871823"},{"path":"/reference/ifelsedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast data.frame comparisons at the cell level — ifelsedata","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Fast data.frame comparisons cell level","code":""},{"path":"/reference/ifelsedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"ifelsedata(x, y, arg = NULL, matchCols = FALSE)"},{"path":"/reference/ifelsedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"x `data.frame` `matrix` y `data.frame` `matrix` dimensions `x` vector length matching rows `x` length 1. `y` `data.frame` `matrix` dimensions different `x`, larger trimmed match dimensions smaller. arg (Optional) logical test expression including `x` `y`. `arg` included, assumed values `y` logical. matchCols (Optional) boolean determines columns matched based name position. Columns returned order `x`. Columns present `x` returned. Defaults `FALSE`.","code":""},{"path":"/reference/ifelsedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Returns data.frame smallest size rows columns.   cells returned `x` test passes `NA`   pass.","code":""},{"path":"/reference/ifelsedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"# create dummy data x <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10)) y <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10))  # test for equality ifelsedata(x, y, \"x >= y | x == y - 2\") #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1   9 NA  8  8 NA  3 NA 10  4  NA #> 2  NA  9  8 10  4  9 10 10 NA   9 #> 3  NA NA NA NA NA  6  8  4 NA   5 #> 4   2 NA 10 10 NA NA NA NA  6   9 #> 5  NA  5 10 NA NA NA NA 10 NA   7 #> 6  NA 10 NA  4  8 NA  3  4  3  10 #> 7  NA NA NA  6 10 NA NA NA  4  10 #> 8   6 NA NA  9 NA  6  2  2  1  10 #> 9  10 NA  1  5  7  3  9  6 NA  NA #> 10 NA 10 NA NA  8 10  4  4 10   2  # rename x columns colnames(x) <- paste0(\"X\", 5:14) # match with column names ifelsedata(x, y, \"x >= y | x == y - 2\", TRUE) #>    X5 X6 X7 X8 X9 X10 #> 1   9  3  8  8  2  NA #> 2  NA  9  8 10 NA   9 #> 3  NA  5  4  7  3   6 #> 4  NA  6 10 10  2   7 #> 5  NA NA 10 NA  7   5 #> 6   4 10 NA  4  8  NA #> 7  NA NA NA NA 10   3 #> 8  NA  9  8  9  2   6 #> 9  10  7 NA  5  7  NA #> 10  6 10  3 NA  8  10  # match based on booleans in y y <- data.frame(matrix(data = sample(c(TRUE, FALSE), 100, TRUE),                        nrow = 10,                        ncol = 10)) # test based on TRUE/FALSE in y ifelsedata(x, y) #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1  NA  3  8 NA  2 NA NA NA  4  NA #> 2   3 NA NA NA  4 NA 10 10 NA   9 #> 3  NA  5  4  7 NA  6  8 NA NA  NA #> 4   2  6 NA 10 NA NA  4 NA NA   9 #> 5  NA NA 10  2 NA NA  2 NA  6  NA #> 6  NA NA NA NA  8 NA  3  4 NA  NA #> 7  NA NA  9  6 NA  3  1 NA  4  NA #> 8   6  9 NA NA NA NA NA  2  1  NA #> 9  10 NA  1 NA NA  3 NA NA  1  NA #> 10  6 10  3 NA  8 10  4  4 10  NA"},{"path":"/reference/lagMultiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Compute lagged version input data multiple lags ","code":""},{"path":"/reference/lagMultiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"lagMultiple(x, k = 1, name = NULL)"},{"path":"/reference/lagMultiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"x vector, single column matrix, univariate time series. Can also multi-column matrix `k` length 1. k (Optional) integer vector containing number lags. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed `x`. possible, `name` default \"X\".","code":""},{"path":"/reference/lagMultiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Returns data.frame lagged variable. number rows   length input vector. number columns   number lags used. column retains name original   variable includes number lags used column. `x`   multi-column matrix, returns matrix number columns   names.","code":""},{"path":"/reference/lagMultiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"# Creating dummy data x <- rnorm(10) # for lags 1-5 lagMultiple(x, 1:5) #>          x_l1       x_l2       x_l3       x_l4       x_l5 #> 1  -0.4774021  0.4256156 -0.8414414 -0.7606546  0.8178145 #> 2   0.4256156 -0.8414414 -0.7606546  0.8178145 -0.2426364 #> 3  -0.8414414 -0.7606546  0.8178145 -0.2426364  0.4358431 #> 4  -0.7606546  0.8178145 -0.2426364  0.4358431 -1.1476711 #> 5   0.8178145 -0.2426364  0.4358431 -1.1476711  0.9591786 #> 6  -0.2426364  0.4358431 -1.1476711  0.9591786         NA #> 7   0.4358431 -1.1476711  0.9591786         NA         NA #> 8  -1.1476711  0.9591786         NA         NA         NA #> 9   0.9591786         NA         NA         NA         NA #> 10         NA         NA         NA         NA         NA  # 1 lag with a matrix of dummy data lagMultiple(matrix(1:100, 10, 10), 1) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   12   22   32   42   52   62   72   82    92 #>  [2,]    3   13   23   33   43   53   63   73   83    93 #>  [3,]    4   14   24   34   44   54   64   74   84    94 #>  [4,]    5   15   25   35   45   55   65   75   85    95 #>  [5,]    6   16   26   36   46   56   66   76   86    96 #>  [6,]    7   17   27   37   47   57   67   77   87    97 #>  [7,]    8   18   28   38   48   58   68   78   88    98 #>  [8,]    9   19   29   39   49   59   69   79   89    99 #>  [9,]   10   20   30   40   50   60   70   80   90   100 #> [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA"},{"path":"/reference/regsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"An exhaustive search regression built on base R — regsearch","title":"An exhaustive search regression built on base R — regsearch","text":"exhaustive search regression built base R","code":""},{"path":"/reference/regsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"regsearch(   data,   dependent,   independent,   minvar = 1,   maxvar,   family,   topN = 0,   interactions = FALSE,   multi = FALSE,   ... )"},{"path":"/reference/regsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An exhaustive search regression built on base R — regsearch","text":"data `data.frame` contains dependent variable independent variables. dependent dependent variable regression. independent vector independent variables used. must match column names `data`. can also include interaction terms made column names `data`. allows specific interaction terms used, rather every possible interaction done `interactions = TRUE`. minvar (Optional) minimum number independent variables used regression. Defaults 1. maxvar maximum number independent variables used regression. Must equal less number independent variables. interaction terms used, count one independent variable. family type regression. Passed `glm`. See glm information. topN (Optional) number top results printed upon run completion. Defaults 0. interactions (Optional) boolean indicating whether interaction terms used. Defaults `FALSE`. multi (Optional) boolean indicating whether multithreading used. Defaults `FALSE`. highly recommended use multithreading. ... (Optional) Function arguments passed glm","code":""},{"path":"/reference/regsearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An exhaustive search regression built on base R — regsearch","text":"Returns `data.table` information regressions run.   resulting data.table sorted descending order rSquare divided   mean p-value. generally reliable pushing quality   regressions top list. `formula` regression formula   used. `aic` aic regression. `rSquare`   calculated r-square regression. `warn` Currently unused. independent variable column contains p-values   variable interaction term given regression.","code":""},{"path":"/reference/regsearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"# Creating dummy data dt <- data.frame(\"dependent\" = sample(c(0, 1), 100, replace = TRUE), \"ind_1\" = runif(100, 0, 1), \"ind_2\" = runif(100, 0, 1), \"ind_3\" = runif(100, 0, 1), \"ind_4\" = runif(100, 0, 1))  # Without interaction terms and multithreading ## Two top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", 2) #> Warning: Missing 'interactions' argument. Defaulting to FALSE. #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.5575  -1.0724  -0.8106   1.1416   1.5977   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)   0.9011     0.4254   2.118   0.0342 * #> ind_2        -1.8842     0.7467  -2.523   0.0116 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.59  on 99  degrees of freedom #> Residual deviance: 131.80  on 98  degrees of freedom #> AIC: 135.8 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.6384  -1.0778  -0.7415   1.1071   1.6822   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)   1.1938     0.5821   2.051   0.0403 * #> ind_1        -0.5866     0.7776  -0.754   0.4506   #> ind_2        -1.9166     0.7531  -2.545   0.0109 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.59  on 99  degrees of freedom #> Residual deviance: 131.23  on 97  degrees of freedom #> AIC: 137.23 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                         formula      aic      bic rSquare warn #>  1:                         dependent ~ + ind_2 135.7994 141.0097 0.04899   NA #>  2:                 dependent ~ + ind_1 + ind_2 137.2265 145.0420 0.05313   NA #>  3:                 dependent ~ + ind_2 + ind_3 137.5135 145.3290 0.05106   NA #>  4:         dependent ~ + ind_1 + ind_2 + ind_3 138.9752 149.3959 0.05494   NA #>  5:         dependent ~ + ind_1 + ind_2 + ind_4 139.1531 149.5738 0.05366   NA #>  6:                 dependent ~ + ind_2 + ind_4 137.7399 145.5554 0.04942   NA #>  7: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 140.9472 153.9730 0.05514   NA #>  8:         dependent ~ + ind_2 + ind_3 + ind_4 139.4959 149.9166 0.05118   NA #>  9:                         dependent ~ + ind_3 141.5571 146.7674 0.00745   NA #> 10:                 dependent ~ + ind_1 + ind_3 143.1921 151.0076 0.01008   NA #> 11:         dependent ~ + ind_1 + ind_3 + ind_4 145.1789 155.5996 0.01018   NA #> 12:                 dependent ~ + ind_3 + ind_4 143.5499 151.3655 0.00750   NA #> 13:                 dependent ~ + ind_1 + ind_4 144.0717 151.8872 0.00374   NA #> 14:                         dependent ~ + ind_1 142.1691 147.3794 0.00303   NA #> 15:                         dependent ~ + ind_4 142.5071 147.7175 0.00059   NA #>     xIntercept     ind_1      ind_2     ind_3     ind_4 #>  1: 0.03416544        NA 0.01162835        NA        NA #>  2: 0.04028304 0.4505890 0.01093086        NA        NA #>  3: 0.28160670        NA 0.01686115 0.5930185        NA #>  4: 0.19505140 0.4644585 0.01558383 0.6163601        NA #>  5: 0.11699713 0.4452103 0.01105218        NA 0.7865671 #>  6: 0.16492105        NA 0.01175327        NA 0.8073087 #>  7: 0.25256420 0.4601772 0.01546828 0.6499951 0.8671164 #>  8: 0.36699716        NA 0.01677494 0.6213574 0.8946616 #>  9: 0.32685095        NA         NA 0.3118944        NA #> 10: 0.73821965 0.5463969         NA 0.3251578        NA #> 11: 0.72720309 0.5431224         NA 0.3466446 0.9085703 #> 12: 0.40444598        NA         NA 0.3299570 0.9326706 #> 13: 0.89150302 0.5102742         NA        NA 0.7551636 #> 14: 0.64263827 0.5176057         NA        NA        NA #> 15: 0.72863342        NA         NA        NA 0.7742642 ## No top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", FALSE, FALSE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>                                         formula      aic      bic rSquare warn #>  1:                         dependent ~ + ind_2 135.7994 141.0097 0.04899   NA #>  2:                 dependent ~ + ind_1 + ind_2 137.2265 145.0420 0.05313   NA #>  3:                 dependent ~ + ind_2 + ind_3 137.5135 145.3290 0.05106   NA #>  4:         dependent ~ + ind_1 + ind_2 + ind_3 138.9752 149.3959 0.05494   NA #>  5:         dependent ~ + ind_1 + ind_2 + ind_4 139.1531 149.5738 0.05366   NA #>  6:                 dependent ~ + ind_2 + ind_4 137.7399 145.5554 0.04942   NA #>  7: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 140.9472 153.9730 0.05514   NA #>  8:         dependent ~ + ind_2 + ind_3 + ind_4 139.4959 149.9166 0.05118   NA #>  9:                         dependent ~ + ind_3 141.5571 146.7674 0.00745   NA #> 10:                 dependent ~ + ind_1 + ind_3 143.1921 151.0076 0.01008   NA #> 11:         dependent ~ + ind_1 + ind_3 + ind_4 145.1789 155.5996 0.01018   NA #> 12:                 dependent ~ + ind_3 + ind_4 143.5499 151.3655 0.00750   NA #> 13:                 dependent ~ + ind_1 + ind_4 144.0717 151.8872 0.00374   NA #> 14:                         dependent ~ + ind_1 142.1691 147.3794 0.00303   NA #> 15:                         dependent ~ + ind_4 142.5071 147.7175 0.00059   NA #>     xIntercept     ind_1      ind_2     ind_3     ind_4 #>  1: 0.03416544        NA 0.01162835        NA        NA #>  2: 0.04028304 0.4505890 0.01093086        NA        NA #>  3: 0.28160670        NA 0.01686115 0.5930185        NA #>  4: 0.19505140 0.4644585 0.01558383 0.6163601        NA #>  5: 0.11699713 0.4452103 0.01105218        NA 0.7865671 #>  6: 0.16492105        NA 0.01175327        NA 0.8073087 #>  7: 0.25256420 0.4601772 0.01546828 0.6499951 0.8671164 #>  8: 0.36699716        NA 0.01677494 0.6213574 0.8946616 #>  9: 0.32685095        NA         NA 0.3118944        NA #> 10: 0.73821965 0.5463969         NA 0.3251578        NA #> 11: 0.72720309 0.5431224         NA 0.3466446 0.9085703 #> 12: 0.40444598        NA         NA 0.3299570 0.9326706 #> 13: 0.89150302 0.5102742         NA        NA 0.7551636 #> 14: 0.64263827 0.5176057         NA        NA        NA #> 15: 0.72863342        NA         NA        NA 0.7742642  # With interaction terms and multithreading regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", TRUE, TRUE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Gathering variables...\" #> [1] \"WARNING: Using interaction terms without multithreading may take a very long time\" #> [1] \"Assembling regresions...\" #> [1] \"Creating 385 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 105 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.5575  -1.0724  -0.8106   1.1416   1.5977   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)   0.9011     0.4254   2.118   0.0342 * #> ind_2        -1.8842     0.7467  -2.523   0.0116 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.59  on 99  degrees of freedom #> Residual deviance: 131.80  on 98  degrees of freedom #> AIC: 135.8 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                              formula      aic      bic rSquare #>   1:                             dependent ~ + ind_2 135.7994 141.0097 0.04899 #>   2:               dependent ~ + ind_1*ind_3 + ind_2 136.4225 149.4483 0.08779 #>   3: dependent ~ + ind_1*ind_3 + ind_3*ind_4 + ind_2 136.8221 155.0583 0.11377 #>   4:       dependent ~ + ind_1*ind_3 + ind_2 + ind_4 138.1041 153.7352 0.09009 #>   5:               dependent ~ + ind_3*ind_4 + ind_2 138.5913 151.6172 0.07214 #>  ---                                                                           #> 101:                     dependent ~ + ind_3 + ind_4 143.5499 151.3655 0.00750 #> 102:                       dependent ~ + ind_1*ind_4 145.6754 156.0960 0.00660 #> 103:                     dependent ~ + ind_1 + ind_4 144.0717 151.8872 0.00374 #> 104:                             dependent ~ + ind_1 142.1691 147.3794 0.00303 #> 105:                             dependent ~ + ind_4 142.5071 147.7175 0.00059 #>      warn xIntercept     ind_1      ind_2      ind_3     ind_4 ind_1.ind_2 #>   1:   NA 0.03416544        NA 0.01162835         NA        NA          NA #>   2:   NA 0.70482990 0.1430741 0.01054558 0.04182453        NA          NA #>   3:   NA 0.57411492 0.1641478 0.01048566 0.62176545 0.1763840          NA #>   4:   NA 0.56878543 0.1274671 0.01003637 0.03971326 0.5736756          NA #>   5:   NA 0.07127257        NA 0.01742793 0.23962118 0.1505082          NA #>  ---                                                                       #> 101:   NA 0.40444598        NA         NA 0.32995700 0.9326706          NA #> 102:   NA 0.67720040 0.7680565         NA         NA 0.4852188          NA #> 103:   NA 0.89150302 0.5102742         NA         NA 0.7551636          NA #> 104:   NA 0.64263827 0.5176057         NA         NA        NA          NA #> 105:   NA 0.72863342        NA         NA         NA 0.7742642          NA #>      ind_1.ind_3 ind_1.ind_4 ind_2.ind_3 ind_2.ind_4 ind_3.ind_4 ind_3.ind_2 #>   1:          NA          NA          NA          NA          NA          NA #>   2:  0.03870073          NA          NA          NA          NA          NA #>   3:  0.03386313          NA          NA          NA  0.07865250          NA #>   4:  0.03351709          NA          NA          NA          NA          NA #>   5:          NA          NA          NA          NA  0.09644395          NA #>  ---                                                                         #> 101:          NA          NA          NA          NA          NA          NA #> 102:          NA   0.5301913          NA          NA          NA          NA #> 103:          NA          NA          NA          NA          NA          NA #> 104:          NA          NA          NA          NA          NA          NA #> 105:          NA          NA          NA          NA          NA          NA #>      ind_4.ind_2 ind_4.ind_3 #>   1:          NA          NA #>   2:          NA          NA #>   3:          NA          NA #>   4:          NA          NA #>   5:          NA          NA #>  ---                         #> 101:          NA          NA #> 102:          NA          NA #> 103:          NA          NA #> 104:          NA          NA #> 105:          NA          NA"}]
