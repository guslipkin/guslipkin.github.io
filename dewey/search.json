[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gus Lipkin. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lipkin G (2022). dewey: R library variety things. R package version 0.1.3.","code":"@Manual{,   title = {dewey: An R library for a variety of things},   author = {Gus Lipkin},   year = {2022},   note = {R package version 0.1.3}, }"},{"path":"/index.html","id":"dewey","dir":"","previous_headings":"","what":"An R library for a variety of things","title":"An R library for a variety of things","text":"R library variety things small collection functions may helpful STATA users regular human beings.","code":""},{"path":"/index.html","id":"install-process","dir":"","previous_headings":"","what":"Install Process","title":"An R library for a variety of things","text":"","code":"install.packages(\"devtools\") devtools::install_github(\"guslipkin/dewey\")"},{"path":"/index.html","id":"regsearch","dir":"","previous_headings":"","what":"regsearch","title":"An R library for a variety of things","text":"(data, dependent, independent, minvar = 1, maxvar, family, topN = 0, interactions = FALSE, multi = FALSE, ...) exhaustive search regression built base R","code":""},{"path":"/index.html","id":"ifelsedata","dir":"","previous_headings":"","what":"ifelsedata","title":"An R library for a variety of things","text":"(x, y, arg = NULL, matchCols = FALSE) Fast data.frame comparisons cell level","code":""},{"path":"/index.html","id":"difffill","dir":"","previous_headings":"","what":"diffFill","title":"An R library for a variety of things","text":"(x, lag = 1, differences = 1, ...) wrapper base diff function returns data.frame length input. Allows vector input lag differences.","code":""},{"path":"/index.html","id":"lagmultiple","dir":"","previous_headings":"","what":"lagMultiple","title":"An R library for a variety of things","text":"(x, k = 1) Appropriately lags input variable returns data.frame length input. Allows vector input k.","code":""},{"path":"/reference/diffFill.html","id":null,"dir":"Reference","previous_headings":"","what":"An extension on `diff` from base R that fills blank space with NA — diffFill","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"extension `diff` base R fills blank space NA","code":""},{"path":"/reference/diffFill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"diffFill(x, lag = 1, differences = 1, ...)"},{"path":"/reference/diffFill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"x numeric vector matrix containing values differenced lag (Optional) integer indicating lag use. Defaults 1 differences (Optional) integer indicating order difference. Defaults 1 ... (Optional) arguments passed methods","code":""},{"path":"/reference/diffFill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"Returns vector length input, otherwise behaves   diff","code":""},{"path":"/reference/diffFill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"# Creating dummy data x <- rnorm(10) # for 1 lag and 2 differences diffFill(x, 1, 2) #>        x_l1d2 #> 1          NA #> 2          NA #> 3  -3.5214871 #> 4   0.8553715 #> 5   2.3870852 #> 6  -3.6431777 #> 7   2.3391916 #> 8  -0.6604477 #> 9   0.7271938 #> 10 -1.0944986"},{"path":"/reference/ifelsedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast data.frame comparisons at the cell level — ifelsedata","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Fast data.frame comparisons cell level","code":""},{"path":"/reference/ifelsedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"ifelsedata(x, y, arg = NULL, matchCols = FALSE)"},{"path":"/reference/ifelsedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"x `data.frame` dimensions `y`. y `data.frame` dimensions `x` vector length one. arg (Optional) logical test expression including `x` `y`. `arg` included, assumed values `y` logical. matchCols (Optional) boolean determines columns matched based name position. Default `FALSE`","code":""},{"path":"/reference/ifelsedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Returns data.frame smallest size rows columns.   cells returned `x` test passes `NA`   pass.","code":""},{"path":"/reference/ifelsedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"# create dummy data x <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10)) y <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10))  # test for equality ifelsedata(x, y, \"x >= y | x == y - 2\") #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1  NA  3  7  6  9 NA  4  6 NA   5 #> 2   8  7  9  5  4  8  9  4 NA  NA #> 3   5 NA NA  2 NA  7 NA NA  2   4 #> 4   7  6 NA  3  7  2  3  7 NA  NA #> 5   7  7  5  9 10 NA  9  9  9  10 #> 6  NA  9 NA  3 NA  8 10  7 NA   3 #> 7   6 NA  9  5  3  4 NA  8 NA  NA #> 8  NA  1  8 NA NA  5 10  8  9   9 #> 9  NA  6  1  6 NA 10  5 NA NA  10 #> 10  6  9 10  9  5  5 10 NA NA  NA  # rename x columns colnames(x) <- paste0(\"X\", 5:14) # match with column names ifelsedata(x, y, \"x >= y | x == y - 2\", TRUE) #>    X5 X6 X7 X8 X9 X10 #> 1  NA NA  7  6  9   8 #> 2   8  7  9  5 NA   8 #> 3  NA  5 NA NA  2   7 #> 4   7  6  9  3  7  NA #> 5   7 NA  5  9 10  NA #> 6  NA NA  4 NA  7   8 #> 7   6  4  9  5  3  NA #> 8  NA  1  8  6  7  NA #> 9  NA  6 NA NA  6  10 #> 10  6  9 10  9 NA  NA  # match based on booleans in y y <- data.frame(matrix(data = sample(c(TRUE, FALSE), 100, TRUE),                        nrow = 10,                        ncol = 10)) # test based on TRUE/FALSE in y ifelsedata(x, y) #>       X5    X6    X7    X8    X9   X10   X11   X12   X13   X14 #> 1   TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE #> 2  FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE #> 3  FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE #> 4   TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE #> 5  FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE #> 6   TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE #> 7   TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE #> 8   TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE #> 9   TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE #> 10  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE"},{"path":"/reference/lagMultiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Compute lagged version input data multiple lags ","code":""},{"path":"/reference/lagMultiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"lagMultiple(x, k = 1)"},{"path":"/reference/lagMultiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"x vector, single column matrix, univariate time series k (Optional) integer vector containing number lags. Defaults 1","code":""},{"path":"/reference/lagMultiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Returns data.frame lagged variable. number rows   length input vector. number columns   number lags used. column retains name original   variable includes number lags used column.","code":""},{"path":"/reference/lagMultiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"# Creating dummy data x <- rnorm(10) # for lags 1-5 lagMultiple(x, 1:5) #>        x_lag1     x_lag2     x_lag3     x_lag4     x_lag5 #> 1  -1.3949956  0.3875965  0.4144453 -0.5058364  0.5911629 #> 2   0.3875965  0.4144453 -0.5058364  0.5911629  1.1265305 #> 3   0.4144453 -0.5058364  0.5911629  1.1265305 -0.3732625 #> 4  -0.5058364  0.5911629  1.1265305 -0.3732625  0.9696802 #> 5   0.5911629  1.1265305 -0.3732625  0.9696802  1.1116460 #> 6   1.1265305 -0.3732625  0.9696802  1.1116460         NA #> 7  -0.3732625  0.9696802  1.1116460         NA         NA #> 8   0.9696802  1.1116460         NA         NA         NA #> 9   1.1116460         NA         NA         NA         NA #> 10         NA         NA         NA         NA         NA"},{"path":"/reference/regsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"An exhaustive search regression built on base R — regsearch","title":"An exhaustive search regression built on base R — regsearch","text":"exhaustive search regression built base R","code":""},{"path":"/reference/regsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"regsearch(   data,   dependent,   independent,   minvar = 1,   maxvar,   family,   topN = 0,   interactions = FALSE,   multi = FALSE,   ... )"},{"path":"/reference/regsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An exhaustive search regression built on base R — regsearch","text":"data `data.frame` contains dependent variable independent variables. dependent dependent variable regression. independent vector independent variables used. must match column names `data`. can also include interaction terms made column names `data`. allows specific interaction terms used, rather every possible interaction done `interactions = TRUE`. minvar (Optional) minimum number independent variables used regression. Defaults 1. maxvar maximum number independent variables used regression. Must equal less number independent variables. interaction terms used, count one independent variable. family type regression. Passed `glm`. See glm information. topN (Optional) number top results printed upon run completion. Defaults 0. interactions (Optional) boolean indicating whether interaction terms used. Defaults `FALSE`. multi (Optional) boolean indicating whether multithreading used. Defaults `FALSE`. highly recommended use multithreading. ... (Optional) Function arguments passed glm","code":""},{"path":"/reference/regsearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An exhaustive search regression built on base R — regsearch","text":"Returns `data.table` information regressions run.   resulting data.table sorted descending order rSquare divided   mean p-value. generally reliable pushing quality   regressions top list. `formula` regression formula   used. `aic` aic regression. `rSquare`   calculated r-square regression. `warn` Currently unused. independent variable column contains p-values   variable interaction term given regression.","code":""},{"path":"/reference/regsearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"# Creating dummy data dt <- data.frame(\"dependent\" = sample(c(0, 1), 100, replace = TRUE), \"ind_1\" = runif(100, 0, 1), \"ind_2\" = runif(100, 0, 1), \"ind_3\" = runif(100, 0, 1), \"ind_4\" = runif(100, 0, 1))  # Without interaction terms and multithreading ## Two top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", 2) #> Warning: Missing 'interactions' argument. Defaulting to FALSE. #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.5194  -1.1872   0.8829   1.0940   1.3109   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)   0.7788     0.4002   1.946   0.0517 . #> ind_1        -1.1498     0.6771  -1.698   0.0895 . #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 137.63  on 99  degrees of freedom #> Residual deviance: 134.66  on 98  degrees of freedom #> AIC: 138.66 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.5951  -1.1856   0.8347   1.1042   1.3764   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)   1.0945     0.5084   2.153   0.0313 * #> ind_1        -1.0678     0.6855  -1.558   0.1193   #> ind_4        -0.7390     0.7040  -1.050   0.2938   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 137.63  on 99  degrees of freedom #> Residual deviance: 133.55  on 97  degrees of freedom #> AIC: 139.55 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                         formula      aic      bic rSquare warn #>  1:                         dependent ~ + ind_1 138.6638 143.8741 0.02154   NA #>  2:                 dependent ~ + ind_1 + ind_4 139.5527 147.3682 0.02961   NA #>  3:         dependent ~ + ind_1 + ind_3 + ind_4 141.3947 151.8154 0.03076   NA #>  4:         dependent ~ + ind_1 + ind_2 + ind_4 141.5455 151.9662 0.02966   NA #>  5: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 143.3880 156.4138 0.03081   NA #>  6:                 dependent ~ + ind_1 + ind_3 140.5338 148.3493 0.02248   NA #>  7:                         dependent ~ + ind_4 140.0339 145.2443 0.01158   NA #>  8:                 dependent ~ + ind_1 + ind_2 140.6516 148.4671 0.02162   NA #>  9:         dependent ~ + ind_1 + ind_2 + ind_3 142.5223 152.9430 0.02256   NA #> 10:                 dependent ~ + ind_2 + ind_4 142.0311 149.8466 0.01160   NA #> 11:                 dependent ~ + ind_3 + ind_4 142.0333 149.8489 0.01158   NA #> 12:         dependent ~ + ind_2 + ind_3 + ind_4 144.0306 154.4512 0.01161   NA #> 13:                 dependent ~ + ind_2 + ind_3 143.6197 151.4352 0.00006   NA #> 14:                         dependent ~ + ind_2 141.6225 146.8329 0.00004   NA #> 15:                         dependent ~ + ind_3 141.6251 146.8354 0.00002   NA #>     xIntercept dependent      ind_1     ind_2     ind_3     ind_4 #>  1: 0.05168419        NA 0.08947686        NA        NA        NA #>  2: 0.03131053        NA 0.11930563        NA        NA 0.2938390 #>  3: 0.05807068        NA 0.10860025        NA 0.6912250 0.2879162 #>  4: 0.07075024        NA 0.11898704 0.9325871        NA 0.2949019 #>  5: 0.08742664        NA 0.10833907 0.9346180 0.6916179 0.2889093 #>  6: 0.10732984        NA 0.08312523        NA 0.7186630        NA #>  7: 0.11496342        NA         NA        NA        NA 0.2101289 #>  8: 0.13121597        NA 0.08911364 0.9122276        NA        NA #>  9: 0.15601134        NA 0.08282872 0.9145349 0.7193167        NA #> 10: 0.22645170        NA         NA 0.9576573        NA 0.2104581 #> 11: 0.22643690        NA         NA        NA 0.9810766 0.2104229 #> 12: 0.30110577        NA         NA 0.9578917 0.9816077 0.2107692 #> 13: 0.68129557        NA         NA 0.9417139 0.9578817        NA #> 14: 0.57759926        NA         NA 0.9422805        NA        NA #> 15: 0.62153427        NA         NA        NA 0.9586709        NA ## No top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", FALSE, FALSE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>                                         formula      aic      bic rSquare warn #>  1:                         dependent ~ + ind_1 138.6638 143.8741 0.02154   NA #>  2:                 dependent ~ + ind_1 + ind_4 139.5527 147.3682 0.02961   NA #>  3:         dependent ~ + ind_1 + ind_3 + ind_4 141.3947 151.8154 0.03076   NA #>  4:         dependent ~ + ind_1 + ind_2 + ind_4 141.5455 151.9662 0.02966   NA #>  5: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 143.3880 156.4138 0.03081   NA #>  6:                 dependent ~ + ind_1 + ind_3 140.5338 148.3493 0.02248   NA #>  7:                         dependent ~ + ind_4 140.0339 145.2443 0.01158   NA #>  8:                 dependent ~ + ind_1 + ind_2 140.6516 148.4671 0.02162   NA #>  9:         dependent ~ + ind_1 + ind_2 + ind_3 142.5223 152.9430 0.02256   NA #> 10:                 dependent ~ + ind_2 + ind_4 142.0311 149.8466 0.01160   NA #> 11:                 dependent ~ + ind_3 + ind_4 142.0333 149.8489 0.01158   NA #> 12:         dependent ~ + ind_2 + ind_3 + ind_4 144.0306 154.4512 0.01161   NA #> 13:                 dependent ~ + ind_2 + ind_3 143.6197 151.4352 0.00006   NA #> 14:                         dependent ~ + ind_2 141.6225 146.8329 0.00004   NA #> 15:                         dependent ~ + ind_3 141.6251 146.8354 0.00002   NA #>     xIntercept dependent      ind_1     ind_2     ind_3     ind_4 #>  1: 0.05168419        NA 0.08947686        NA        NA        NA #>  2: 0.03131053        NA 0.11930563        NA        NA 0.2938390 #>  3: 0.05807068        NA 0.10860025        NA 0.6912250 0.2879162 #>  4: 0.07075024        NA 0.11898704 0.9325871        NA 0.2949019 #>  5: 0.08742664        NA 0.10833907 0.9346180 0.6916179 0.2889093 #>  6: 0.10732984        NA 0.08312523        NA 0.7186630        NA #>  7: 0.11496342        NA         NA        NA        NA 0.2101289 #>  8: 0.13121597        NA 0.08911364 0.9122276        NA        NA #>  9: 0.15601134        NA 0.08282872 0.9145349 0.7193167        NA #> 10: 0.22645170        NA         NA 0.9576573        NA 0.2104581 #> 11: 0.22643690        NA         NA        NA 0.9810766 0.2104229 #> 12: 0.30110577        NA         NA 0.9578917 0.9816077 0.2107692 #> 13: 0.68129557        NA         NA 0.9417139 0.9578817        NA #> 14: 0.57759926        NA         NA 0.9422805        NA        NA #> 15: 0.62153427        NA         NA        NA 0.9586709        NA  # With interaction terms and multithreading regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", TRUE, TRUE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Gathering variables...\" #> [1] \"WARNING: Using interaction terms without multithreading may take a very long time\" #> [1] \"Assembling regresions...\" #> [1] \"Creating 385 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 105 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -2.0984  -1.1412   0.6122   1.0383   1.8345   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)    #> (Intercept)  -1.1173     0.8399  -1.330  0.18344    #> ind_1         2.7810     1.4738   1.887  0.05917 .  #> ind_2         3.6858     1.5010   2.456  0.01407 *  #> ind_1:ind_2  -7.5984     2.6043  -2.918  0.00353 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 137.63  on 99  degrees of freedom #> Residual deviance: 124.82  on 96  degrees of freedom #> AIC: 132.82 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                                    formula      aic      bic #>   1:                             dependent ~ + ind_1*ind_2 132.8162 143.2369 #>   2:               dependent ~ + ind_1*ind_2 + ind_1*ind_4 133.1568 148.7878 #>   3:                     dependent ~ + ind_1*ind_2 + ind_4 134.0560 147.0818 #>   4: dependent ~ + ind_1*ind_2 + ind_1*ind_3 + ind_1*ind_4 135.9390 156.7804 #>   5:       dependent ~ + ind_1*ind_2 + ind_1*ind_4 + ind_3 135.0785 153.3147 #>  ---                                                                         #> 101:                     dependent ~ + ind_2*ind_4 + ind_3 146.0154 159.0413 #> 102:                             dependent ~ + ind_2*ind_3 145.0645 155.4851 #> 103:                           dependent ~ + ind_2 + ind_3 143.6197 151.4352 #> 104:                                   dependent ~ + ind_2 141.6225 146.8329 #> 105:                                   dependent ~ + ind_3 141.6251 146.8354 #>      rSquare warn xIntercept dependent      ind_1      ind_2     ind_3 #>   1: 0.09309   NA 0.18343782        NA 0.05916935 0.01406654        NA #>   2: 0.11968   NA 0.09365226        NA 0.01471562 0.01037579        NA #>   3: 0.09861   NA 0.35332661        NA 0.05847411 0.01532926        NA #>   4: 0.12853   NA 0.44466612        NA 0.11254934 0.01050877 0.2918947 #>   5: 0.12025   NA 0.14781034        NA 0.01642908 0.01048903 0.7796107 #>  ---                                                                   #> 101: 0.01172   NA 0.38608051        NA         NA 0.89426907 0.9955702 #> 102: 0.00409   NA 0.40811304        NA         NA 0.49399890 0.5405585 #> 103: 0.00006   NA 0.68129557        NA         NA 0.94171387 0.9578817 #> 104: 0.00004   NA 0.57759926        NA         NA 0.94228053        NA #> 105: 0.00002   NA 0.62153427        NA         NA         NA 0.9586709 #>          ind_4 ind_1.ind_2 ind_1.ind_3 ind_1.ind_4 ind_2.ind_3 ind_2.ind_4 #>   1:        NA 0.003527669          NA          NA          NA          NA #>   2: 0.3206293 0.003055125          NA  0.09656868          NA          NA #>   3: 0.3842955 0.004116451          NA          NA          NA          NA #>   4: 0.3256211 0.003139329   0.2889174  0.09332854          NA          NA #>   5: 0.3238935 0.003086096          NA  0.09737385          NA          NA #>  ---                                                                       #> 101: 0.4615657          NA          NA          NA          NA   0.9021502 #> 102:        NA          NA          NA          NA   0.4581338          NA #> 103:        NA          NA          NA          NA          NA          NA #> 104:        NA          NA          NA          NA          NA          NA #> 105:        NA          NA          NA          NA          NA          NA #>      ind_3.ind_4 ind_3.ind_2 ind_4.ind_2 ind_4.ind_3 #>   1:          NA          NA          NA          NA #>   2:          NA          NA          NA          NA #>   3:          NA          NA          NA          NA #>   4:          NA          NA          NA          NA #>   5:          NA          NA          NA          NA #>  ---                                                 #> 101:          NA          NA          NA          NA #> 102:          NA          NA          NA          NA #> 103:          NA          NA          NA          NA #> 104:          NA          NA          NA          NA #> 105:          NA          NA          NA          NA"}]
